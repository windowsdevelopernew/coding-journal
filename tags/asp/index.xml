<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asp on Coding Journal</title>
    <link>http://localhost:1313/tags/asp/</link>
    <description>Recent content in Asp on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/asp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using ETag to cache responses in NancyFX</title>
      <link>http://localhost:1313/using-etag-to-cache-responses-in-nancyfx/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/using-etag-to-cache-responses-in-nancyfx/</guid>
      <description>&lt;p&gt;Caching data is usually a good idea, especially when creating APIs for mobile clients and the user may pay for each transferred byte. There are many approaches to caching data (I recommend reading &lt;a href=&#34;http://frontendplay.com/2013/05/22/http-caching-demystified/&#34;&gt;this article&lt;/a&gt;), in my last NancyFX project I used ETag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ETag&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ETag is a HTTP header that acts as a hash of the data. When the server returns a response, it computes a hash of the data and sends it to the client. When the client requests the data again, it includes the ETag in its request. The server compares the ETag with the hash of the current data and if they match (the data did not change), it returns an empty responses with a HTTP 304 status code.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/4e6d24d0fedfe8361c6b.js?file=etagresponse.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;NancyFX impelemntation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To implement caching using ETag in NancyFX I use a method in my base module&lt;/p&gt;

&lt;p&gt;There are two parameters in this method, because you may sometimes want to compute the ETag from only a part of the returned model.&lt;/p&gt;

&lt;p&gt;Using this method is the really simple&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/4e6d24d0fedfe8361c6b.js?file=usage.cs&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Detecting tablets and smartphones in ASP.NET</title>
      <link>http://localhost:1313/detecting-tablets-and-smartphones-in-asp-net/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/detecting-tablets-and-smartphones-in-asp-net/</guid>
      <description>&lt;p&gt;I recently worked on an ASP.NET application that needed to detect if users were coming from tablets or smartphones. The project used data from &lt;a href=&#34;http://user-agent-string.info/&#34;&gt;http://user-agent-string.info/&lt;/a&gt; to do this detection, but the result were not really good. We needed a better solution, so I came up with using &lt;a href=&#34;http://wurfl.sourceforge.net/&#34;&gt;WURFL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WURFL, the Wireless Universal Resource FiLe, is a Device Description Repository (DDR), i.e. a software component that maps HTTP Request headers to the profile of the HTTP client (Desktop, Mobile Device, Tablet, etc.) that issued the request. Adding WURFL to your ASP.NET application is easy thanks to the &lt;a href=&#34;https://www.nuget.org/packages/WURFL_Official_API/&#34;&gt;WURFL_Official_API Nuget package&lt;/a&gt;. The Nuget package also contains definition file, so you just need to update the Nuget package once in a while to get your definition file up to date.&lt;/p&gt;

&lt;p&gt;After installing the Nuget package, you need to setup WURLF in your Global.asax file&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/dc65bf6d68aec59d57e2.js?file=wurlf_setup.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;I recommend setting the match mode to accuracy instead of speed, to get the best results. Using the WURFL library is also quite easy, just pass the user agent string and get the properties you want.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/dc65bf6d68aec59d57e2.js?file=wurfl_usage.cs&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Detecting encoding of uploaded file in ASP.NET MVC</title>
      <link>http://localhost:1313/detecting-encoding-of-uploaded-file-in-asp-net-mvc/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/detecting-encoding-of-uploaded-file-in-asp-net-mvc/</guid>
      <description>&lt;p&gt;Uploading a file in ASP.NET MVC is very easy, but there is no easy way to detect the encoding of a uploaded text file. However you can use the fact if you try to read the file with a wrong encoding, you get an DecoderFallbackException. So how do you put everything together?&lt;/p&gt;

&lt;p&gt;First, get a stream of the uploaded file.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849381.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Next, read the whole file to a byte array&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849384.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Finally the trick is to try all the encodings you think the file may be in and chech if if fails or not&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849390.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>