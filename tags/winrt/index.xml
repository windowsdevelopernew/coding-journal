<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Winrt on Coding Journal</title>
    <link>http://localhost:1313/tags/winrt/</link>
    <description>Recent content in Winrt on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/winrt/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Highlighting letters in TextBlock in Windows Phone 8.1 and Windows 8.1</title>
      <link>http://localhost:1313/highlighting-letters-in-textblock-in-windows-phone-8-1-and-windows-8-1/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/highlighting-letters-in-textblock-in-windows-phone-8-1-and-windows-8-1/</guid>
      <description>&lt;p&gt;In my current project I had to implement an interesting feature for both Windows Phone 8.1 and Windows 8.1 project of the Universal app. The idea is simply. The users want to search for a movie. They enter a search term into a TextBox and a list of results is shown. The results should have the search term highlighted in them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/highlighting.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;The standard TextBlock used to display the movie titles does not support any kind of letter highlighting, so I had to write a custom one. I created a custom UserControl. The UserControl contains a few dependency properties Text, HighlightedText, HighlightBrush and a TextBlock. When Text or HighlightedText change, the Text is then split into multiple Runs that are added to the TextBlock.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/87b051f2f3a54bf895f0.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The whole working custom control is available at Github: &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.HighlightTextBox&#34;&gt;https://github.com/igorkulman/Kulman.WPA81.HighlightTextBox&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Strange combination of HTTPS and Windows Phone 8.1 that can make your app and phone freeze</title>
      <link>http://localhost:1313/strange-combination-of-https-and-windows-phone-8-1-that-can-make-your-app-and-phone-freeze/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/strange-combination-of-https-and-windows-phone-8-1-that-can-make-your-app-and-phone-freeze/</guid>
      <description>&lt;p&gt;Last week I came upon a really bizarre problem that you may also find interesting. Lets start with a bit of context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tl;Dr&lt;/strong&gt;: There seems to be a bug in Windows phone 8.1 that can make your app and the phone freezes when displaying images over HTTPS from some servers. Skip to &lt;a href=&#34;#bug&#34;&gt;the end of this article&lt;/a&gt; to see a video and get the source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Windows Phone app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The app is a Windows Phone 8 shopping app for the biggest Czech online retailer. The main screen of the app contains quite a bit of data, usually about ten carousel with about 10 products and the list of main categories, so about 10 more images.&lt;/p&gt;

&lt;p&gt;In worst case the main screen contains over 10 hundred images. It was quite a hassle to make it work well in the Windows Phone 8 SDK (no, rewriting a shopping about with about 70 screens to Windows Phone 8.1 is not feasible). But it work juts fine. Until last week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week, users started to report that the app freezes on the main screen, sometime making the whole phone freeze. This was really bad. Frozen app means not only angry customers but customer that do not buy stuff. So I started to investigate.&lt;/p&gt;

&lt;p&gt;First I thought there may be a problem in the app, although the app was last updated more than a month ago and the problem started only last week. Everything worked fine in the emulator, the problem was reproducible only on real devices. I tried showing only one carousel to make the app render much less data, did not help. I tried making the app show only one product in the only one carousel, still a problem. So it looked like the images were the problem. I tried replacing all the real image urls with random images from &lt;a href=&#34;http://lorempixel.com&#34;&gt;lorempixel.com&lt;/a&gt; and the app worked just fine.&lt;/p&gt;

&lt;p&gt;I determined that the source of the problems are the images on the server. Talking with the server customer&amp;#8217;s people I found out that the images on the server were exchanged for bigger one because of the iPhones. But it did not make sense. I tried using much bigger random images and the app worked fine. I tried downloading the images and using them locally, the app worked fine.&lt;/p&gt;

&lt;p&gt;&lt;strong id=&#34;bug&#34;&gt;Windows Phone 8.1 bug?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally I found out that the app worked the whole time on phones with Windows 10, only phones with Windows Phone 8.1 were affected. Android and iOS apps that the customer has also never experienced this problem. This make me thing that there is some kind of bug in Windows Phone 8.1 that causes this behavior, because the app does not do any image processing, it only uses an Image control and sets is Source url.&lt;/p&gt;

&lt;p&gt;Here is a sample app to reproduce the problem: &lt;a href=&#34;https://github.com/igorkulman/WindowsPhoneHttpsImageBug&#34;&gt;https://github.com/igorkulman/WindowsPhoneHttpsImageBug&lt;/a&gt;. The solution contains a Windows Phone 8 project and a Windows Phone 8.1. Both apps suffer from the sample problem, but the problem is worse in the Silverlight app. This also makes me think that this is a Windows Phone 8.1 bug, independent on the Windows Phone SDK version.&lt;/p&gt;

&lt;p&gt;I made a video using the sample app showing the problem&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe src=&#34;http://player.vimeo.com/video/138747871&#34; width=&#34;640&#34; height=&#34;385&#34; frameborder=&#34;0&#34; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Google login in Universal Apps</title>
      <link>http://localhost:1313/implementing-google-login-in-universal-apps/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/implementing-google-login-in-universal-apps/</guid>
      <description>&lt;p&gt;In a recent project I had to implement Google login to an Universal App. I decided to use the native &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows.security.authentication.web.webauthenticationbroker.aspx&#34;&gt;WebAuthenticationBroker&lt;/a&gt; control and the implementation was not as straightforward as I hoped. By implementing Google login I mean getting the authentication token that you can then use with your server API.&lt;/p&gt;

&lt;p&gt;WebAuthenticationBroker is a good idea but it is implemented rather poorly. It works differently on Windows 8.1 and Windows Phone 8.1 due to the &amp;#8220;AndContinue&amp;#8221; pattern that Windows Phone 8.1 forces on you. You can solve this with &lt;a href=&#34;http://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/&#34;&gt;some ifdefs and platform specific code, as always&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The real problem s that the &lt;a href=&#34;https://code.msdn.microsoft.com/windowsapps/Web-Authentication-d0485122&#34;&gt;MSDN sample&lt;/a&gt; states it works with Google login but it does not. The sample thinks it gets the authentication token but it does not, it just gets the success code that you have to exchange for the authentication token yourself.&lt;/p&gt;

&lt;p&gt;Lets start with a basic config&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=config.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The important things here are your Google app id and Google app secret. The GoogleStartUri also contains permissions that you want to get (profile, &lt;a href=&#34;https://www.googleapis.com/auth/plus.login&#34;&gt;https://www.googleapis.com/auth/plus.login&lt;/a&gt; and &lt;a href=&#34;https://www.googleapis.com/auth/plus.me&#34;&gt;https://www.googleapis.com/auth/plus.me&lt;/a&gt; email in my case).&lt;/p&gt;

&lt;p&gt;You use this config with a WebAuthenticationBroker call&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=login.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;on Windows 8.1 you get the response data immediately. On Windows Phone 8.1, you have to implement the &amp;#8220;AndContinue&amp;#8221; pattern.&lt;/p&gt;

&lt;p&gt;You use the response data to parse out the success code&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=GetGoogleSuccessCode.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now that you have the success code, you can exchange it for the authentication token&lt;/p&gt;

&lt;p&gt;And now you finally have a way to get the authentication token and implement Google login.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=GetToken.cs&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Customizing the Player Framework UI</title>
      <link>http://localhost:1313/customizing-the-player-framework-ui/</link>
      <pubDate>Mon, 04 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/customizing-the-player-framework-ui/</guid>
      <description>&lt;p&gt;In my last article I gave you a tip on how to localize the Player Framework, in this article I will show you have to customize the UI of the actual player.&lt;/p&gt;

&lt;p&gt;The first step is to obtain the Generic.xaml file that the Player Framework uses for styling. You can find it in C:\ Program Files (x86)\ Microsoft SDKs\ Windows\ v8.0\ ExtensionSDKs\ Microsoft.PlayerFramework.Xaml\ 2.0.0.0\ Redist\ CommonConfiguration\ neutral\ Microsoft.PlayerFramework\ Themes. Copy it to your projects and rename it to something more telling, like PlayerFramework.xaml.&lt;/p&gt;

&lt;p&gt;You can now edit the copied XAML file and customize it any way you want. If you do the styling for a Windows Phone app, keep in mind that the ControlPanel switches to the Compact states and a few transformations are applied by default, that can interfere with your styling.&lt;/p&gt;

&lt;p&gt;Finally, you need to apply the style by adding it to the page with your player&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/7bbbefc9a25afa07c5e1.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The death of the WinRT developer?</title>
      <link>http://localhost:1313/the-death-of-the-winrt-developer/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/the-death-of-the-winrt-developer/</guid>
      <description>&lt;p&gt;As many other Windows Phone / Windows 8 / Universal apps developers (lets just call us WinRT developers) I watched the Build 2015 keynote last night. And I did not like it. I know Microsoft does not know to communicate but the message for me was clear. We, the WinRT developer, are no longer needed.&lt;/p&gt;

&lt;p&gt;First, Microsoft announced that WPF apps will be allowed to be submitted to the Windows Store to be used on desktops / tablets. So why would anyone want to develop (or want to have developed) a Windows 8 (WinRT) app, when they can just use WPF and get everything done easier? I do not know.&lt;/p&gt;

&lt;p&gt;But allowing WPF apps to the Windows Store is a small news compared to the ability to run Android apps on Windows Phone. The first news talked about porting Android apps to the Windows Phone, but later, &lt;a href=&#34;http://www.zdnet.com/article/heres-how-microsoft-hopes-to-get-android-and-ios-phone-apps-into-its-windows-10-store/&#34;&gt;statements like this&lt;/a&gt; appeared&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Android developers will be able to submit versions of their apps, written in Java or C++, to the Windows Store in he form of APKs and have those apps work on Windows Phone 10 devices. Android developers should be able to start submitting apps to the Windows 10 Store some time in the next few months.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let get this straight. Who would want a native mobile Windows app developed, when they can just take their Android app and use it on Windows? What company would want to keep their mobile Windows team, when they can just use their Android team to make Windows apps?&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    So I can use WPF to get into the store, and Java to get onto WinPhone and Android. So why would I write a universal app???
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Morten Nielsen (@dotMorten) &lt;a href=&#34;https://twitter.com/dotMorten/status/593467368124379137&#34;&gt;April 29, 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure, Android apps will probably not run on XBOX and HoloLens, but I doubt Microsoft will open the XBOX store for all the developers, more likely only chosen companies will be allowed to publish apps. HoloLens will be used only by a small number of people if this price is not really low (which I doubt it will be), so only a few HoloLens apps will be needed.&lt;/p&gt;

&lt;p&gt;For me, the situation seems clear, it is the death of the WinRT developer.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    Can the last XAML dev to leave please turn out the lights. &lt;a href=&#34;https://twitter.com/hashtag/Build2015?src=hash&#34;&gt;#Build2015&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Mark Allan (@MarkXA) &lt;a href=&#34;https://twitter.com/MarkXA/status/593468730794967043&#34;&gt;April 29, 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Player Framework localization</title>
      <link>http://localhost:1313/player-framework-localization/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/player-framework-localization/</guid>
      <description>&lt;p&gt;In my recent universal (Windows Phone 8.1 and Windows 8.1) project I implemented PlayReady DRM protected smooth streaming movies playback using the &lt;a href=&#34;https://playerframework.codeplex.com/&#34;&gt;Player Framework&lt;/a&gt;. This projects seems to be dead, but it is still the best option when implementing any kind of video playback.&lt;/p&gt;

&lt;p&gt;One of the first things I had to do was localize it&amp;#8217;s controls, because the app I worked on was in Czech and Slovak, not in English (the only language the Player Framework supports out of the box). Not all the texts an be localized, but the most visible ones like button labels and error messages can.&lt;/p&gt;

&lt;p&gt;To create your own localization, I suggest you create a new RESW file in your project. You can use and existing one, but I prefer to separate the texts for the Player Framework from texts for the rest of the app.&lt;/p&gt;

&lt;p&gt;Next you have to find out the keys for the string you want to localize. You an &lt;a href=&#34;https://playerframework.codeplex.com/SourceControl/latest#Win8.Xaml.Localize.Win81/en-US/PlayerFramework.resw&#34;&gt;find them in the source code&lt;/a&gt;. You can just copy the content of that RESW file to yours RESW file and localized everything.&lt;/p&gt;

&lt;p&gt;The last step is to let the PlayerFramework know about your RESW file using&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/a5dcc1537cb977d023b4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Leveraging ETag caching in Windows Phone and Windows apps</title>
      <link>http://localhost:1313/leveraging-etag-caching-in-windows-phone-and-windows-apps/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/leveraging-etag-caching-in-windows-phone-and-windows-apps/</guid>
      <description>&lt;p&gt;In my previous article I showed you &lt;a href=&#34;http://blog.kulman.sk/using-etag-to-cache-responses-in-nancyfx/&#34; title=&#34;Using ETag to cache responses in NancyFX&#34;&gt;how to implements server side caching using ETag&lt;/a&gt;. HTTP clients on other platforms can usually work with ETag automatically, but of course, the portable HTTP client used on Windows platforms cannot. You have to implement ETag handling yourself.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://blog.kulman.sk/tvtime-track-your-favorite-tv-shows-on-windows-phone/&#34; title=&#34;TvTime: track your favorite TV shows on Windows Phone&#34;&gt;TvTime&lt;/a&gt;, all the server requests are GET request, so I remember the ETag values for each Url (= each GET request). I store the ETag values in application local settings.&lt;/p&gt;

&lt;p&gt;When the app wants to get some data, I perform a GET request including the ETag as the If-None-Match header. If my ETag matches with the ETag on the server, the server returns HTTP 304 Not Modified and I return the cached data from disk. Otherwise I read the response body and return it.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/55fa534bdcb4ab963253.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This approach works with the portable Http client library, that you can use with Windows Phone 8 (Silverlight), 8.1 (Sliverlight), 8.1 XAML and Windows &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;.1. If you only need to support Windows Phone 8.1 XAML and Windows 8.1, you may want to look into the Windows.Web.Http.HttpClient.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back navigation on Backspace key press in Windows 8.1 apps</title>
      <link>http://localhost:1313/back-navigation-on-backspace-key-press-in-windows-8-1-apps/</link>
      <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/back-navigation-on-backspace-key-press-in-windows-8-1-apps/</guid>
      <description>&lt;p&gt;I am not a mouse or a touch person, I like using the keyboard and keyboard shortcuts for everything. So when I (have to) use a Windows 8.1 Metro app, I always miss when the app does not navigate back when I press the Backspace key, just like the browser does.&lt;/p&gt;

&lt;p&gt;Implementing this functionality is really simple, you just need to handle the KeyUp event and listen for the Backspace key. You can implement the KeyUp event handler on every View in your app, but that is not necessary. You can just hook up the global Window.Current.CoreWindow.KeyUp event after you app starts.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/b0f41a1a25acad0d17a4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;If you implement this in your app, I am sure you will make some of your users more happy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Changing the PivotItem header color in Windows Phone 8.1 XAML</title>
      <link>http://localhost:1313/changing-the-pivotitem-header-color-in-windows-phone-8-1-xaml/</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/changing-the-pivotitem-header-color-in-windows-phone-8-1-xaml/</guid>
      <description>&lt;p&gt;Windows Phone 8.1 XAML contains a Pivot control that looks like the one from Windows Phone &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt; and also should behave the same way, but does not. You will find the first problem with the new Pivot when you want to change the PivotItem header color.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows Phone &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to change the PivotItem header color in Windows Phone &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;, you just define the color in the Header template:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/a49d0c7d471c4de42521.js?file=wp8.xaml&#34;&gt;&lt;/script&gt;

&lt;p&gt;This works great, changing the color of the active PivotItem Header to the color you want and applying some opacity to the inactive PivotItem Headers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/header78.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows Phone 8.1 XAML&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you apply the same Header template to PivotItem in Windows Phone 8.1 XAML, you will find that there is a bug in the control. The inactive PivotItem Headers do not get opacity change applied.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/header81.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;This is obviously a problem, if you do not want to do same SelectedIndex manipulation to change the color programatically for all the inactive PivotItem headers.&lt;/p&gt;

&lt;p&gt;Luckily, there is a way to fix this. You can redefine the PivotHeaderForegroundUnselectedBrush and PivotHeaderForegroundSelectedBrush to the active and inactive colors of your choice.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/a49d0c7d471c4de42521.js?file=wp81.xaml&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Dialog helper for Universal Apps the easy way</title>
      <link>http://localhost:1313/dialog-helper-for-universal-apps/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/dialog-helper-for-universal-apps/</guid>
      <description>&lt;p&gt;Today I read Joost van Schaik&amp;#8217;s blog post called &lt;a href=&#34;http://dotnetbyexample.blogspot.nl/2014/12/a-behavior-to-show-messagedialog-from.html&#34;&gt;A behavior to show a MessageDialog from a MVVMLight viewmodel in Universal apps–with callbacks&lt;/a&gt;. I am not a MVVMLight guy (I use Caliburn.Micro) and I personally use an approach that uses a little less code, employing a helper class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Helper class&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=DialogHelper.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;with a simple usage in ViewModel&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=usage.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and in the View (making use of Caliburn.Micro mapping the AppBarButton with x:Name=&amp;#8221;Message&amp;#8221; to the Message method in the ViewModel&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=usage.xaml&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you want to show a dialog with just the Ok button, set cancelText to null and do not process the helper method&amp;#8217;s result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you do not like static classes, just make it service&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=DialogHelperService.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;the usage in the ViewModel will change just slightly&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=usage2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and you can easily mock the service and test the ViewModel.&lt;/p&gt;

&lt;p&gt;You can find the complete code in a sample solution on GitHub: &lt;a href=&#34;https://github.com/igorkulman/SampleMessagePopup&#34;&gt;https://github.com/igorkulman/SampleMessagePopup&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a fake splashscreen for your Universal App</title>
      <link>http://localhost:1313/creating-a-fake-splashscreen-for-your-universal-app/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/creating-a-fake-splashscreen-for-your-universal-app/</guid>
      <description>&lt;p&gt;Sometimes you may want your app to display the startup splashscreen a bit longer, so you can initialize or fetch some data necessary for the app to run. To achieve this, you can create a fake splaschreen, a View that looks just like the splashscreen, does all the work and redirects to the real main View afterwards.&lt;/p&gt;

&lt;p&gt;In theory, it is quite simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a SplashScreenView with just the right background and the splashscreen image&lt;/li&gt;
&lt;li&gt;Set the app to display SplashScreenView at startup&lt;/li&gt;
&lt;li&gt;Do all the initializing and data fetching in SplashScreenViewModel and redirect to there real MainView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This works quite well with Windows 8.1, but on Windows Phone 8.1 there is a problem. When you run the Windows Phone 8.1 app, you will see a page transition happen between the real splashscreen and your SplashScreenView. This looks strange, so it is better to get rid of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Managing the Frame transitions on Windows Phone 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To fix this issue, you can disable the transitions on the frame and add them manually to each View other than SplashScreenView, but there is a better way. You can disable the transitions when creating the frame and the enable them after navigating from the SplashScreenView. Do not forget the &lt;a href=&#34;http://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/&#34; title=&#34;Why Universal Apps as not as universal as you may think&#34;&gt;#ifdefs, because it is one of those many things that are Windows Phone specific in the Universal Apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/d61c0a71e8ed0e2fbc1d.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This makes the illusion of the fake splashscreen perfect, but I would recommend adding a ProgressBar or ProgressRing to the SplashScreenView so the users do not have the feeling that your app froze.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Universal Apps as not as universal as you may think</title>
      <link>http://localhost:1313/why-universal-apps-as-not-as-universal-as-you-may-think/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/why-universal-apps-as-not-as-universal-as-you-may-think/</guid>
      <description>&lt;p&gt;I have been developing Windows Phone apps for a few years now, always sticking to Silverlight and keeping using Silverlight also after Microsoft announced the WinRT flavor of Windows Phone apps and the so called Universal Apps. The Windows Phone 8.0 and 8.1 Silverlight APIs have some limitations, but are now well known do not contain many bugs. They are the safe choice if you want to create a Windows Phone apps. And do not forget that there are still many device running Windows Phone 8 (like Verizon customers in the US) that never got the 8.1 updated promised to everyone during the summer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Really universal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows Phone 8.1 XAML and Universal Apps included WinRT APIs that have many problems, including some that there is no solution for. I used the WinRT APIs when creating first Windows 8 apps about 2 years ago, so I am not new to the APIs. I have not touched the WinRT APIs again until recently, because there was no demand for Windows 8 or Windows 8.1 apps. Why would it? People use Windows 8 or 8.1 but do not care about Metro apps, they give them no value compared to &amp;#8220;normal&amp;#8221; Win32 and Windows tablets are practically non-exists (expect for the Surface tablets owned by few programmers and maybe no one else).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Universal Apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently, a client was thinking about adding a Windows Phone app for their service the its existing Android and iOS apps, but they did not think it was worth the money. So the local Microsoft branch told them they would pay for the app (seems like many of the app here are created this way) under two conditions. The app had to be a Universal App and had to be finished before the years end. The client agreed and I had to create a Universal App. And the problems started.&lt;/p&gt;

&lt;p&gt;In theory, Universal Apps are supposed to make code sharing between Windows Phone and Windows 8.1 simple and allow you to reuse as much code as possible. This works on the trivial Microsoft samples, but try to create a real world app. I have a business logic project with API calls, storage, etc. in a portable class library (like I always did before Universal Apps existed) and I created an Universal App from the template. And the #ifdef hell started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/56995992.jpg&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#ifdefs everywhere&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Universal Apps you can safely share the ViewModels (I am using Caliburn.Micro) .. and that is about it. You have to create separate Views (because on phone and desktop information is typically displayed different), but the worst parts are the #ifdefs.&lt;/p&gt;

&lt;p&gt;You need to set some properties of the main Frame, you have to use #ifdefs because the frame is a bit different on phone and desktop (like animations). You want to reuse as much DataTemplates as possible, so add another #ifdef for adding the right resource dictionary or many #ifdefs in the data templates to tune them, because it does not matter you use GridView on phone and GridView on desktop, they behave a bit differently in some cases.&lt;/p&gt;

&lt;p&gt;Then you need to add audio playback to your app. There is a background audio playback API for Windows Phone 8.1 and none for Windows 8.1 In Windows 8.1 you need a global MediaElement in your Frame and handling everything differently. So add another big #ifdef. And by the way, the background audio playback API for Windows Phone 8.1 really sucks compared to the old Silverlight APIs. Just try downloading the &lt;a href=&#34;https://code.msdn.microsoft.com/windowsapps/BackgroundAudio-63bbc319&#34;&gt;sample form MSDN&lt;/a&gt; and hitting Suspend and Resume in Visual Studio, the background agent crashes horribly, without any exception and takes your Visual Studio instance to hell with it. And of course, the background audio playback API does not work on some phones. &lt;a href=&#34;https://stackoverflow.com/questions/26175599/windows-phone-8-1-rt-backgroundmediaplayer-not-working&#34;&gt;Just does not work&lt;/a&gt;. I confirmed this finding with other developers. Another messed up API that used to work before the whole Universal Apps hype. And explain this to the client who sees that things like this work on iOS, work on Android, hell, they even for on Windows Phone 8.0 (Slivelight) apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More messed up APIs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So background audio playback API for Windows Phone 8.1 is messed up, anything else? Sure. BackgroundDownloader is another example. In Silverlight, there was a BackgroundDownloader that was quite limited, but it worked. In Universal Apps, there is a new BackgroundDownloader with some new features, and some essential ones missing. For example, in Silverlight, each download could have a Tag, where you can store any data so you know something about the download when it finishes (to what business entity it belongs, etc.). Not any more in Universal Apps. There is no Tag, so you have to build and manage you own kind of index for all the downloads, so you can actually match them to your business entities. An annoyance, but nothing you cannot manage, right.&lt;/p&gt;

&lt;p&gt;The BackgroundDownloader in Universal Apps has a bigger problem. It sometimes crashes so horribly, that it reboots the whole device! No exception, no logs, just a reboot. The maximum limit for the BackgroundDownloader is 1000 downloads, but try adding say 300 to the queue, cancelling them after a few minutes (does not seem to matter if you use one cancellation token or give each download its own) and there is a good chance the phone or the emulator will reboot itself. Not always, but quite often. Again, try explaining this issue to the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Silverlight, I commonly used the LongListSelector to display data, using it with a WrapPanel when I needed to create a two column layout. The LongListSelector is gone, in Universal Apps you have to use GridView also on Windows Phone. Or you can use the ListView with a custom wrap panel you write yourself or download somewhere, but it takes some effort to make it do virtualization properly.&lt;/p&gt;

&lt;p&gt;So you use GridView on both Windows Phone 8.1 and Windows 8.1 to make it consistent. Add tens f of items with images to it and the performance starts to really suffer. Gray placeholders will show up and more importantly, &lt;a href=&#34;https://stackoverflow.com/questions/27488201/gridview-and-placeholders-that-never-disapper-in-windows-8-and-windows-phone-app&#34;&gt;never disappears&lt;/a&gt;. You do not event need images, just add about 300 text only items to the GridView and the gray placeholders will starts to show when scrolling.&lt;/p&gt;

&lt;p&gt;Need another proof that the WinRT controls are slower? Just &lt;a href=&#34;https://www.youtube.com/watch?v=nn5hVq6Q-zo&#34;&gt;take a look at this video comparing the media app on and old Windows Phone 7 to the media app on a much more powerful device running Windows Phone 8.1&lt;/a&gt;. You can see that the old, single core device runs the Silverlight apps faster than the new powerful phone runs the new WinRT equivalent of the app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>REST service base class for Windows Phone 8.1 XAML apps</title>
      <link>http://localhost:1313/rest-service-base-class-for-windows-phone-8-1-xaml-apps/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/rest-service-base-class-for-windows-phone-8-1-xaml-apps/</guid>
      <description>&lt;p&gt;Communicating with a JSON based REST service is a task that many Windows Phone apps have to do. My apps sure do it a lot so I came up with a base class that I use in all of them, &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.BaseRestService&#34;&gt;put it on Github&lt;/a&gt; and &lt;a href=&#34;https://www.nuget.org/packages/Kulman.WPA81.BaseRestService/&#34;&gt;created a Nuget package&lt;/a&gt;, so your apps could use it to.&lt;/p&gt;

&lt;p&gt;The usage of this base class is simple. Create your service class and inherit from BaseRestService. The minimum you need to do to make it work is to override the GetBaseUrl() method to set the base url for all the requests. You can (but do not have to) also override the GetRequestHeaders() method to set the default request headers.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/405732bf92858dba1c3c.js?file=usage1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and you can now use the following protected methods&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/405732bf92858dba1c3c.js?file=methods.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;All the JSON serialization and deserialization is automatically done for you. If you need to execute some action before every request (like checking if the OAuth token expired and refreshing it), simply override the OnBeforeRequest() method.&lt;/p&gt;

&lt;p&gt;Methods in your service may then look like this&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/405732bf92858dba1c3c.js?file=usage2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In case of an error, the methods throw either a DeserialziationException with the original data if deserialization failed, or a ConnectionException with the HTTP status code.&lt;/p&gt;

&lt;p&gt;if you need some additional features, just raise an issue in the &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.BaseRestService&#34;&gt;Github repo&lt;/a&gt;, or create a pull request.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatic ViewModels and Services registration for (not only) Caliburn.Micro</title>
      <link>http://localhost:1313/automatic-viewmodels-and-services-registration-for-not-only-caliburn-micro/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/automatic-viewmodels-and-services-registration-for-not-only-caliburn-micro/</guid>
      <description>&lt;p&gt;My MVVM framework of choice, Caliburn.Micro, provides a simple Dependency Injection container, where you have to register all your ViewModels and Services. This is done in the Bootstraper&amp;#8217;s Configure method and may look like this:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;where you typically register your ViewModels as per request and services as singletons.&lt;/p&gt;

&lt;p&gt;Of course this is done just once, but having to register a ViewModel each time you create a new one can be a nuisance, especially in a large project.&lt;/p&gt;

&lt;p&gt;There is a better way that uses reflection. First, you need to create attributes that will represent registration as per request and a s singleton:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=PerRequest.cs&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=Singleton.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iterating over all the non-abstract classes in your assemblies using reflection is quite easy, the tricky part is deciding when to register a class as &amp;#8220;itself&amp;#8221; and when to register it for an interface it implements. My rule of thumbs is that if the class implements exactly one interface, it is one of my services and I register it for that interface, otherwise I register it as itself (ViewModels descendant from Screen implement circa 5 interfaces).&lt;/p&gt;

&lt;p&gt;The final registration code looks different for WinRT (Windows 8, Windows 8.1, Windows Phone 8.1 XAML)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and for &amp;#8220;classic&amp;#8221; .NET (Windows Phone 8)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg3.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;because of reflection differences in WinRT. Do not forget to add the PerRequest or Singleton attribute to your classes to make it work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ignoring certificate errors in Windows Phone 8.1</title>
      <link>http://localhost:1313/ignoring-certificate-errors-in-windows-phone-8-1/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ignoring-certificate-errors-in-windows-phone-8-1/</guid>
      <description>&lt;p&gt;Connecting to servers with self-signed, expired or otherwise problematic certificates has always been a problem in Windows Phone. There is no way to ignore certificate errors in Windows Phone 7 and Windows Phone 8, not even using the new Portable HTTP Client Libraries. If you are dealing with a self-signed certificate on the server, you have to somehow get it (may not always be possible) and install it on the device or in the emulator (for emulator every time you close and start it again). Ignoring certificate errors would be a much more comfortable approach. Of course, only do it in development with dev servers, not in production.&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1 there are strangely two HttpClient classes, one in System.Net.Http and another in Windows.Web.Http. Normally you would go with the one in System.Net.Http because you are probably using it thanks to the mentioned Portable HTTP Client Libraries on every other platform. You are out of luck in Windows Phone 8.1 XAML, if you want to ignore certificate errors, you have to use the one from Windows.Web.Http, because only this one accepts an IHttpFilter as an argument.&lt;/p&gt;

&lt;p&gt;Using the IHttpFilter, you can easily ignore certificate errors&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/76c9d8f1e79b6fd41c33.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;but you have to get used to doing all the request in a different way, the Windows.Web.Http.HttpClient way that differs from the System.Net.Http.HttpClient way.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>