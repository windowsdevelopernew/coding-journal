<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Coding Journal</title>
    <link>https://blog.kulman.sk/tags/git/</link>
    <description>Recent content in Git on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.kulman.sk/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quick Tip: Showing solution branch name in Visual Studio title</title>
      <link>https://blog.kulman.sk/quick-tip-showing-solution-branch-name-in-visual-studio-title/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/quick-tip-showing-solution-branch-name-in-visual-studio-title/</guid>
      <description>&lt;p&gt;By default, Visual Studio shows the name of the opened solution name in the title. This makes it easier to navigate among multiple instances of Visual Studio. You see the solution name next to the Visual Studio icon in the taskbar and also in the task manager, when you have to (and we all sometimes have to) kill the right Visual Studio because it stopped responding.&lt;/p&gt;

&lt;p&gt;I work with Git, switching branches frequently, especially working on features and bug fixes. In this situation, it would be nice if Visual Studio showed not only the solution name but also the current branch in its title. No problem, there is an extension for that.&lt;/p&gt;

&lt;p&gt;The extension is called &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/f3f23845-5b1e-4811-882f-60b7181fa6d6&#34;&gt;Rename Visual Studio Window&lt;/a&gt; and it works with Visual Studio 2015, 2013, 2012, 2010. This extension supports Git, so you can easily add the branch name to the title with a config like mine using [gitBranchName].&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/rename.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Your taskbar will then look like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/trayalya.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatically push your Git repos before computer shutdown</title>
      <link>https://blog.kulman.sk/automatically-push-your-git-repos-before-computer-shutdown/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/automatically-push-your-git-repos-before-computer-shutdown/</guid>
      <description>&lt;p&gt;I use two computers, my desktop computer located at home and set up for work and play and a work notebook (company provided) that I usually leave at the office. I use both computers for work and sometimes I forget to do &amp;#8216;git push&amp;#8217; when working at my home desktop computer. The next day, when using the work notebook, I wonder where the code from the previous day has disappeared.&lt;/p&gt;

&lt;p&gt;Of course, I can solve it by connecting to my home Raspberry Pi through SSH, waking the desktop computer over LAN from it, connecting to it using Remote Desktop to do the &amp;#8216;git push&amp;#8217; .. not really a simple solution, there must be a better way.&lt;/p&gt;

&lt;p&gt;So I came up with a really simple PowerShell script to iterate to a directory with git projects and execute &amp;#8216;git push&amp;#8217; on all of them&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/275a76230757dcd48576.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;To make the script execute on each computer shutdown, run &lt;strong&gt;gpedit.msc&lt;/strong&gt; and go to &lt;strong&gt;Computer Configuration&lt;/strong&gt; | &lt;strong&gt;Windows Settings&lt;/strong&gt; | &lt;strong&gt;Scripts (Startup/Shutdown)&lt;/strong&gt; | &lt;strong&gt;Shutdown&lt;/strong&gt; and add the script. Adding the script just by referencing the .ps1 file did not work for me, I had to add the path to PowerShell (%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe) with the script as a parameter.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>