<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Store on Coding Journal</title>
    <link>https://blog.kulman.sk/tags/windows-store/</link>
    <description>Recent content in Windows Store on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.kulman.sk/tags/windows-store/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Problems getting paid from the Windows Store, again</title>
      <link>https://blog.kulman.sk/problems-getting-paid-from-the-windows-store-again/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/problems-getting-paid-from-the-windows-store-again/</guid>
      <description>&lt;p&gt;I do not make much money on my Windows Phone apps (who does?), but when the payout time comes every couple of months, I expect the money to be delivered. Dealing with Microsoft, I should know better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failed payment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last month I looked into the Dev Center and saw that my scheduled payment failed, telling me to contact the support. So I did. The result was one moth of exchanging email without a solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dealing with support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Microsoft employee told me that I am in a small group of people with this problem. I do not know if I have such a bad look always be in a problematic supposedly small group, or that the group are not that small. He told me that Microsoft will retry the payment. The payment was supposedly retried on June 24th and succeeded. So they say.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Great news, your June payout was returned due to an internal issue; however, the payout of 5264.17 CZK has been re-attempted and was successfully completed on June 24th. If you have not received the payout then please review this transaction with your bank. Please let me know if you have any further questions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I never got the money. The employee asked me a few times if I got the money and then resigned, telling me that it is my problem and I should check with my bank. Of course I checked with my bank, they do not have the money. If they had, they would transfer it to my account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Will it happen again?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the support is not helpful, I think I will never see this money and I can just hope the next payment in a couple of months will be successful. Will it?&lt;/p&gt;

&lt;p&gt;I took a look at my payout settings in the new Dev Center and it is a mess&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/payout.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;It previous pages is telling my that everything is ok and my data is valid, but is it? Those four radios do not give me the confidence to believe it. Especially seeing my old account (x3168) that was there in the Windows Store and I deleted it. I used to get the payment to the x0026 account that was in my Windows Phone Store account.&lt;/p&gt;

&lt;p&gt;Funny thing about this form, I never found out how to delete this old account. If you select it, you can only edit it, no way to delete it. If I select the correct account and click save, nothing changes, the radios all remain unselected. I do now know it is a bug or another great Microsoft UI.&lt;/p&gt;

&lt;p&gt;So I guess maybe the next payment will also get lost somewhere ..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Google login in Universal Apps</title>
      <link>https://blog.kulman.sk/implementing-google-login-in-universal-apps/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/implementing-google-login-in-universal-apps/</guid>
      <description>&lt;p&gt;In a recent project I had to implement Google login to an Universal App. I decided to use the native &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows.security.authentication.web.webauthenticationbroker.aspx&#34;&gt;WebAuthenticationBroker&lt;/a&gt; control and the implementation was not as straightforward as I hoped. By implementing Google login I mean getting the authentication token that you can then use with your server API.&lt;/p&gt;

&lt;p&gt;WebAuthenticationBroker is a good idea but it is implemented rather poorly. It works differently on Windows 8.1 and Windows Phone 8.1 due to the &amp;#8220;AndContinue&amp;#8221; pattern that Windows Phone 8.1 forces on you. You can solve this with &lt;a href=&#34;http://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/&#34;&gt;some ifdefs and platform specific code, as always&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The real problem s that the &lt;a href=&#34;https://code.msdn.microsoft.com/windowsapps/Web-Authentication-d0485122&#34;&gt;MSDN sample&lt;/a&gt; states it works with Google login but it does not. The sample thinks it gets the authentication token but it does not, it just gets the success code that you have to exchange for the authentication token yourself.&lt;/p&gt;

&lt;p&gt;Lets start with a basic config&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=config.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The important things here are your Google app id and Google app secret. The GoogleStartUri also contains permissions that you want to get (profile, &lt;a href=&#34;https://www.googleapis.com/auth/plus.login&#34;&gt;https://www.googleapis.com/auth/plus.login&lt;/a&gt; and &lt;a href=&#34;https://www.googleapis.com/auth/plus.me&#34;&gt;https://www.googleapis.com/auth/plus.me&lt;/a&gt; email in my case).&lt;/p&gt;

&lt;p&gt;You use this config with a WebAuthenticationBroker call&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=login.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;on Windows 8.1 you get the response data immediately. On Windows Phone 8.1, you have to implement the &amp;#8220;AndContinue&amp;#8221; pattern.&lt;/p&gt;

&lt;p&gt;You use the response data to parse out the success code&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=GetGoogleSuccessCode.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now that you have the success code, you can exchange it for the authentication token&lt;/p&gt;

&lt;p&gt;And now you finally have a way to get the authentication token and implement Google login.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/65a406f7f3cff48be3c5.js?file=GetToken.cs&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>The death of the WinRT developer?</title>
      <link>https://blog.kulman.sk/the-death-of-the-winrt-developer/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/the-death-of-the-winrt-developer/</guid>
      <description>&lt;p&gt;As many other Windows Phone / Windows 8 / Universal apps developers (lets just call us WinRT developers) I watched the Build 2015 keynote last night. And I did not like it. I know Microsoft does not know to communicate but the message for me was clear. We, the WinRT developer, are no longer needed.&lt;/p&gt;

&lt;p&gt;First, Microsoft announced that WPF apps will be allowed to be submitted to the Windows Store to be used on desktops / tablets. So why would anyone want to develop (or want to have developed) a Windows 8 (WinRT) app, when they can just use WPF and get everything done easier? I do not know.&lt;/p&gt;

&lt;p&gt;But allowing WPF apps to the Windows Store is a small news compared to the ability to run Android apps on Windows Phone. The first news talked about porting Android apps to the Windows Phone, but later, &lt;a href=&#34;http://www.zdnet.com/article/heres-how-microsoft-hopes-to-get-android-and-ios-phone-apps-into-its-windows-10-store/&#34;&gt;statements like this&lt;/a&gt; appeared&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Android developers will be able to submit versions of their apps, written in Java or C++, to the Windows Store in he form of APKs and have those apps work on Windows Phone 10 devices. Android developers should be able to start submitting apps to the Windows 10 Store some time in the next few months.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let get this straight. Who would want a native mobile Windows app developed, when they can just take their Android app and use it on Windows? What company would want to keep their mobile Windows team, when they can just use their Android team to make Windows apps?&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    So I can use WPF to get into the store, and Java to get onto WinPhone and Android. So why would I write a universal app???
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Morten Nielsen (@dotMorten) &lt;a href=&#34;https://twitter.com/dotMorten/status/593467368124379137&#34;&gt;April 29, 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure, Android apps will probably not run on XBOX and HoloLens, but I doubt Microsoft will open the XBOX store for all the developers, more likely only chosen companies will be allowed to publish apps. HoloLens will be used only by a small number of people if this price is not really low (which I doubt it will be), so only a few HoloLens apps will be needed.&lt;/p&gt;

&lt;p&gt;For me, the situation seems clear, it is the death of the WinRT developer.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; width=&#34;550&#34;&gt;
  &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
    Can the last XAML dev to leave please turn out the lights. &lt;a href=&#34;https://twitter.com/hashtag/Build2015?src=hash&#34;&gt;#Build2015&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; Mark Allan (@MarkXA) &lt;a href=&#34;https://twitter.com/MarkXA/status/593468730794967043&#34;&gt;April 29, 2015&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Player Framework localization</title>
      <link>https://blog.kulman.sk/player-framework-localization/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/player-framework-localization/</guid>
      <description>&lt;p&gt;In my recent universal (Windows Phone 8.1 and Windows 8.1) project I implemented PlayReady DRM protected smooth streaming movies playback using the &lt;a href=&#34;https://playerframework.codeplex.com/&#34;&gt;Player Framework&lt;/a&gt;. This projects seems to be dead, but it is still the best option when implementing any kind of video playback.&lt;/p&gt;

&lt;p&gt;One of the first things I had to do was localize it&amp;#8217;s controls, because the app I worked on was in Czech and Slovak, not in English (the only language the Player Framework supports out of the box). Not all the texts an be localized, but the most visible ones like button labels and error messages can.&lt;/p&gt;

&lt;p&gt;To create your own localization, I suggest you create a new RESW file in your project. You can use and existing one, but I prefer to separate the texts for the Player Framework from texts for the rest of the app.&lt;/p&gt;

&lt;p&gt;Next you have to find out the keys for the string you want to localize. You an &lt;a href=&#34;https://playerframework.codeplex.com/SourceControl/latest#Win8.Xaml.Localize.Win81/en-US/PlayerFramework.resw&#34;&gt;find them in the source code&lt;/a&gt;. You can just copy the content of that RESW file to yours RESW file and localized everything.&lt;/p&gt;

&lt;p&gt;The last step is to let the PlayerFramework know about your RESW file using&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/a5dcc1537cb977d023b4.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Leveraging ETag caching in Windows Phone and Windows apps</title>
      <link>https://blog.kulman.sk/leveraging-etag-caching-in-windows-phone-and-windows-apps/</link>
      <pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/leveraging-etag-caching-in-windows-phone-and-windows-apps/</guid>
      <description>&lt;p&gt;In my previous article I showed you &lt;a href=&#34;http://blog.kulman.sk/using-etag-to-cache-responses-in-nancyfx/&#34; title=&#34;Using ETag to cache responses in NancyFX&#34;&gt;how to implements server side caching using ETag&lt;/a&gt;. HTTP clients on other platforms can usually work with ETag automatically, but of course, the portable HTTP client used on Windows platforms cannot. You have to implement ETag handling yourself.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://blog.kulman.sk/tvtime-track-your-favorite-tv-shows-on-windows-phone/&#34; title=&#34;TvTime: track your favorite TV shows on Windows Phone&#34;&gt;TvTime&lt;/a&gt;, all the server requests are GET request, so I remember the ETag values for each Url (= each GET request). I store the ETag values in application local settings.&lt;/p&gt;

&lt;p&gt;When the app wants to get some data, I perform a GET request including the ETag as the If-None-Match header. If my ETag matches with the ETag on the server, the server returns HTTP 304 Not Modified and I return the cached data from disk. Otherwise I read the response body and return it.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/55fa534bdcb4ab963253.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This approach works with the portable Http client library, that you can use with Windows Phone 8 (Silverlight), 8.1 (Sliverlight), 8.1 XAML and Windows &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;.1. If you only need to support Windows Phone 8.1 XAML and Windows 8.1, you may want to look into the Windows.Web.Http.HttpClient.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back navigation on Backspace key press in Windows 8.1 apps</title>
      <link>https://blog.kulman.sk/back-navigation-on-backspace-key-press-in-windows-8-1-apps/</link>
      <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/back-navigation-on-backspace-key-press-in-windows-8-1-apps/</guid>
      <description>&lt;p&gt;I am not a mouse or a touch person, I like using the keyboard and keyboard shortcuts for everything. So when I (have to) use a Windows 8.1 Metro app, I always miss when the app does not navigate back when I press the Backspace key, just like the browser does.&lt;/p&gt;

&lt;p&gt;Implementing this functionality is really simple, you just need to handle the KeyUp event and listen for the Backspace key. You can implement the KeyUp event handler on every View in your app, but that is not necessary. You can just hook up the global Window.Current.CoreWindow.KeyUp event after you app starts.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/b0f41a1a25acad0d17a4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you implement this in your app, I am sure you will make some of your users more happy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dialog helper for Universal Apps the easy way</title>
      <link>https://blog.kulman.sk/dialog-helper-for-universal-apps/</link>
      <pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/dialog-helper-for-universal-apps/</guid>
      <description>&lt;p&gt;Today I read Joost van Schaik&amp;#8217;s blog post called &lt;a href=&#34;http://dotnetbyexample.blogspot.nl/2014/12/a-behavior-to-show-messagedialog-from.html&#34;&gt;A behavior to show a MessageDialog from a MVVMLight viewmodel in Universal apps–with callbacks&lt;/a&gt;. I am not a MVVMLight guy (I use Caliburn.Micro) and I personally use an approach that uses a little less code, employing a helper class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Helper class&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=DialogHelper.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;with a simple usage in ViewModel&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=usage.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and in the View (making use of Caliburn.Micro mapping the AppBarButton with x:Name=&amp;#8221;Message&amp;#8221; to the Message method in the ViewModel&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=usage.xaml&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you want to show a dialog with just the Ok button, set cancelText to null and do not process the helper method&amp;#8217;s result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you do not like static classes, just make it service&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=DialogHelperService.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;the usage in the ViewModel will change just slightly&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/fda1860b35d5312e9157.js?file=usage2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and you can easily mock the service and test the ViewModel.&lt;/p&gt;

&lt;p&gt;You can find the complete code in a sample solution on GitHub: &lt;a href=&#34;https://github.com/igorkulman/SampleMessagePopup&#34;&gt;https://github.com/igorkulman/SampleMessagePopup&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a fake splashscreen for your Universal App</title>
      <link>https://blog.kulman.sk/creating-a-fake-splashscreen-for-your-universal-app/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/creating-a-fake-splashscreen-for-your-universal-app/</guid>
      <description>&lt;p&gt;Sometimes you may want your app to display the startup splashscreen a bit longer, so you can initialize or fetch some data necessary for the app to run. To achieve this, you can create a fake splaschreen, a View that looks just like the splashscreen, does all the work and redirects to the real main View afterwards.&lt;/p&gt;

&lt;p&gt;In theory, it is quite simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a SplashScreenView with just the right background and the splashscreen image&lt;/li&gt;
&lt;li&gt;Set the app to display SplashScreenView at startup&lt;/li&gt;
&lt;li&gt;Do all the initializing and data fetching in SplashScreenViewModel and redirect to there real MainView&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This works quite well with Windows 8.1, but on Windows Phone 8.1 there is a problem. When you run the Windows Phone 8.1 app, you will see a page transition happen between the real splashscreen and your SplashScreenView. This looks strange, so it is better to get rid of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Managing the Frame transitions on Windows Phone 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To fix this issue, you can disable the transitions on the frame and add them manually to each View other than SplashScreenView, but there is a better way. You can disable the transitions when creating the frame and the enable them after navigating from the SplashScreenView. Do not forget the &lt;a href=&#34;http://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/&#34; title=&#34;Why Universal Apps as not as universal as you may think&#34;&gt;#ifdefs, because it is one of those many things that are Windows Phone specific in the Universal Apps&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/d61c0a71e8ed0e2fbc1d.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This makes the illusion of the fake splashscreen perfect, but I would recommend adding a ProgressBar or ProgressRing to the SplashScreenView so the users do not have the feeling that your app froze.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Universal Apps as not as universal as you may think</title>
      <link>https://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/why-universal-apps-as-not-as-universal-as-you-may-think/</guid>
      <description>&lt;p&gt;I have been developing Windows Phone apps for a few years now, always sticking to Silverlight and keeping using Silverlight also after Microsoft announced the WinRT flavor of Windows Phone apps and the so called Universal Apps. The Windows Phone 8.0 and 8.1 Silverlight APIs have some limitations, but are now well known do not contain many bugs. They are the safe choice if you want to create a Windows Phone apps. And do not forget that there are still many device running Windows Phone 8 (like Verizon customers in the US) that never got the 8.1 updated promised to everyone during the summer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Really universal?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows Phone 8.1 XAML and Universal Apps included WinRT APIs that have many problems, including some that there is no solution for. I used the WinRT APIs when creating first Windows 8 apps about 2 years ago, so I am not new to the APIs. I have not touched the WinRT APIs again until recently, because there was no demand for Windows 8 or Windows 8.1 apps. Why would it? People use Windows 8 or 8.1 but do not care about Metro apps, they give them no value compared to &amp;#8220;normal&amp;#8221; Win32 and Windows tablets are practically non-exists (expect for the Surface tablets owned by few programmers and maybe no one else).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Universal Apps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently, a client was thinking about adding a Windows Phone app for their service the its existing Android and iOS apps, but they did not think it was worth the money. So the local Microsoft branch told them they would pay for the app (seems like many of the app here are created this way) under two conditions. The app had to be a Universal App and had to be finished before the years end. The client agreed and I had to create a Universal App. And the problems started.&lt;/p&gt;

&lt;p&gt;In theory, Universal Apps are supposed to make code sharing between Windows Phone and Windows 8.1 simple and allow you to reuse as much code as possible. This works on the trivial Microsoft samples, but try to create a real world app. I have a business logic project with API calls, storage, etc. in a portable class library (like I always did before Universal Apps existed) and I created an Universal App from the template. And the #ifdef hell started.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/56995992.jpg&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;#ifdefs everywhere&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Universal Apps you can safely share the ViewModels (I am using Caliburn.Micro) .. and that is about it. You have to create separate Views (because on phone and desktop information is typically displayed different), but the worst parts are the #ifdefs.&lt;/p&gt;

&lt;p&gt;You need to set some properties of the main Frame, you have to use #ifdefs because the frame is a bit different on phone and desktop (like animations). You want to reuse as much DataTemplates as possible, so add another #ifdef for adding the right resource dictionary or many #ifdefs in the data templates to tune them, because it does not matter you use GridView on phone and GridView on desktop, they behave a bit differently in some cases.&lt;/p&gt;

&lt;p&gt;Then you need to add audio playback to your app. There is a background audio playback API for Windows Phone 8.1 and none for Windows 8.1 In Windows 8.1 you need a global MediaElement in your Frame and handling everything differently. So add another big #ifdef. And by the way, the background audio playback API for Windows Phone 8.1 really sucks compared to the old Silverlight APIs. Just try downloading the &lt;a href=&#34;https://code.msdn.microsoft.com/windowsapps/BackgroundAudio-63bbc319&#34;&gt;sample form MSDN&lt;/a&gt; and hitting Suspend and Resume in Visual Studio, the background agent crashes horribly, without any exception and takes your Visual Studio instance to hell with it. And of course, the background audio playback API does not work on some phones. &lt;a href=&#34;https://stackoverflow.com/questions/26175599/windows-phone-8-1-rt-backgroundmediaplayer-not-working&#34;&gt;Just does not work&lt;/a&gt;. I confirmed this finding with other developers. Another messed up API that used to work before the whole Universal Apps hype. And explain this to the client who sees that things like this work on iOS, work on Android, hell, they even for on Windows Phone 8.0 (Slivelight) apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More messed up APIs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So background audio playback API for Windows Phone 8.1 is messed up, anything else? Sure. BackgroundDownloader is another example. In Silverlight, there was a BackgroundDownloader that was quite limited, but it worked. In Universal Apps, there is a new BackgroundDownloader with some new features, and some essential ones missing. For example, in Silverlight, each download could have a Tag, where you can store any data so you know something about the download when it finishes (to what business entity it belongs, etc.). Not any more in Universal Apps. There is no Tag, so you have to build and manage you own kind of index for all the downloads, so you can actually match them to your business entities. An annoyance, but nothing you cannot manage, right.&lt;/p&gt;

&lt;p&gt;The BackgroundDownloader in Universal Apps has a bigger problem. It sometimes crashes so horribly, that it reboots the whole device! No exception, no logs, just a reboot. The maximum limit for the BackgroundDownloader is 1000 downloads, but try adding say 300 to the queue, cancelling them after a few minutes (does not seem to matter if you use one cancellation token or give each download its own) and there is a good chance the phone or the emulator will reboot itself. Not always, but quite often. Again, try explaining this issue to the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Silverlight, I commonly used the LongListSelector to display data, using it with a WrapPanel when I needed to create a two column layout. The LongListSelector is gone, in Universal Apps you have to use GridView also on Windows Phone. Or you can use the ListView with a custom wrap panel you write yourself or download somewhere, but it takes some effort to make it do virtualization properly.&lt;/p&gt;

&lt;p&gt;So you use GridView on both Windows Phone 8.1 and Windows 8.1 to make it consistent. Add tens f of items with images to it and the performance starts to really suffer. Gray placeholders will show up and more importantly, &lt;a href=&#34;https://stackoverflow.com/questions/27488201/gridview-and-placeholders-that-never-disapper-in-windows-8-and-windows-phone-app&#34;&gt;never disappears&lt;/a&gt;. You do not event need images, just add about 300 text only items to the GridView and the gray placeholders will starts to show when scrolling.&lt;/p&gt;

&lt;p&gt;Need another proof that the WinRT controls are slower? Just &lt;a href=&#34;https://www.youtube.com/watch?v=nn5hVq6Q-zo&#34;&gt;take a look at this video comparing the media app on and old Windows Phone 7 to the media app on a much more powerful device running Windows Phone 8.1&lt;/a&gt;. You can see that the old, single core device runs the Silverlight apps faster than the new powerful phone runs the new WinRT equivalent of the app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>REST service base class for Windows Phone 8.1 XAML apps</title>
      <link>https://blog.kulman.sk/rest-service-base-class-for-windows-phone-8-1-xaml-apps/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/rest-service-base-class-for-windows-phone-8-1-xaml-apps/</guid>
      <description>&lt;p&gt;Communicating with a JSON based REST service is a task that many Windows Phone apps have to do. My apps sure do it a lot so I came up with a base class that I use in all of them, &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.BaseRestService&#34;&gt;put it on Github&lt;/a&gt; and &lt;a href=&#34;https://www.nuget.org/packages/Kulman.WPA81.BaseRestService/&#34;&gt;created a Nuget package&lt;/a&gt;, so your apps could use it to.&lt;/p&gt;

&lt;p&gt;The usage of this base class is simple. Create your service class and inherit from BaseRestService. The minimum you need to do to make it work is to override the GetBaseUrl() method to set the base url for all the requests. You can (but do not have to) also override the GetRequestHeaders() method to set the default request headers.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/405732bf92858dba1c3c.js?file=usage1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and you can now use the following protected methods&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/405732bf92858dba1c3c.js?file=methods.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;All the JSON serialization and deserialization is automatically done for you. If you need to execute some action before every request (like checking if the OAuth token expired and refreshing it), simply override the OnBeforeRequest() method.&lt;/p&gt;

&lt;p&gt;Methods in your service may then look like this&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/405732bf92858dba1c3c.js?file=usage2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In case of an error, the methods throw either a DeserialziationException with the original data if deserialization failed, or a ConnectionException with the HTTP status code.&lt;/p&gt;

&lt;p&gt;if you need some additional features, just raise an issue in the &lt;a href=&#34;https://github.com/igorkulman/Kulman.WPA81.BaseRestService&#34;&gt;Github repo&lt;/a&gt;, or create a pull request.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TvTime: track your favorite TV shows on Windows Phone</title>
      <link>https://blog.kulman.sk/tvtime-track-your-favorite-tv-shows-on-windows-phone/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/tvtime-track-your-favorite-tv-shows-on-windows-phone/</guid>
      <description>&lt;p&gt;We have just had released a new app called TvTime. TvTime is a simple and beautiful app for tracking your favorite TV Shows. Simply add a find the TV Shows you like, add them to the list and get detailed information about actors, air times and episodes. If you decide to track unwatched episodes, you will always know what you have already seen. So get TvTime now so you never miss your favorite TV Show!&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/tvtimepromo.jpg&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Main features&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clean and simple design&lt;/li&gt;
&lt;li&gt;thousands of TV Shows to choose&lt;/li&gt;
&lt;li&gt;tracking unwatched episodes&lt;/li&gt;
&lt;li&gt;live tile&lt;/li&gt;
&lt;li&gt;show and episodes details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download the app for free &lt;a title=&#34;TvTime download&#34; href=&#34;http://www.windowsphone.com/s?appid=517d314b-cf64-41ed-9407-21b2c6e546c0&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/store/apps/9wzdncrdktkk?ocid=badge&#34;&gt;&lt;img src=&#34;https://assets.windowsphone.com/d86ab9b4-2f3d-4a94-92f8-1598073e7343/English_Get_it_Win_10_InvariantCulture_Default.png&#34; srcset=&#34;https://assets.windowsphone.com/5d2bd562-d242-4538-85f4-857d6457404b/English_Get_it_Win_10_InvariantCulture_Default.png 2x&#34;  alt=&#34;Get it on Windows 10&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What to put on the about screen of your Windows Phone app</title>
      <link>https://blog.kulman.sk/what-to-put-on-the-about-screen-of-your-windows-phone-app/</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/what-to-put-on-the-about-screen-of-your-windows-phone-app/</guid>
      <description>&lt;p&gt;The about screen of a Windows Phone app is usually the most overlooked part of the app. Sure, the users usually visit it only once, after installing the app, if ever, but it is a part of your Windows Phone app that you could put to a good use.&lt;/p&gt;

&lt;p&gt;If you have ever taken a DVLUP challenge you may have noticed, that they recommend you place a text describing your app on the about screen. I really do not agree with this. If users install your app, they know what the app does and if they cannot figure it out, then your UI is a failure and the about screen will not save you.&lt;/p&gt;

&lt;p&gt;After some trial and error I came up with a standardized about screen I now use in all my apps. It is a pivot with two tabs; About and More apps.&lt;/p&gt;

&lt;p&gt;The About tab is the most important. It shows the version of the app, this is important when users report problems, information about the author and the designer of the app with Twitter contacts and buttons to send feedback via email and rate the app in the Windows Phone Store. Providing a feedback mechanism is really important, the users will write you about an issue they have with the app instead of just giving you a bad review in the Windows Phone Store.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/about1.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;The screenshot shows the About page from my latest app &lt;a href=&#34;http://blog.kulman.sk/tvtime-track-your-favorite-tv-shows-on-windows-phone/&#34; title=&#34;TvTime: track your favorite TV shows on Windows Phone&#34;&gt;TvTime&lt;/a&gt;. You can easily get the app version from the manifest using the &lt;a href=&#34;https://github.com/igorkulman/Kulman.WP8/blob/master/Kulman.WP8/Code/ManifestHelper.cs&#34;&gt;ManifestHelper&lt;/a&gt; from the &lt;a href=&#34;https://www.nuget.org/packages/Kulman.WP8/&#34;&gt;Kulman.WP8 Nuget package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should know that submitting an app is just a beginning, you then have to answer to user feedback, provide bug fixes, etc. In my case, the Feedback button launches an EmailComposeTask with filled in recipient and subject so the users just write what is on their minds and send it to me. I always answer each and every one of those feedback emails.&lt;/p&gt;

&lt;p&gt;I use the second tab, More apps, as a form of cross-promotion.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/about2.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;If the users like your app, they may also like your other apps so why not make it easier for them to get them. I have a simple XML file with names, links and icons of my apps hosted on a webserver that the app downloads and displays, of course removing itself from the list.&lt;/p&gt;

&lt;p&gt;To sum it all up, do not underestimate your about screen, use it to provide your users with a feedback mechanism. You will make your apps better.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatic ViewModels and Services registration for (not only) Caliburn.Micro</title>
      <link>https://blog.kulman.sk/automatic-viewmodels-and-services-registration-for-not-only-caliburn-micro/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/automatic-viewmodels-and-services-registration-for-not-only-caliburn-micro/</guid>
      <description>&lt;p&gt;My MVVM framework of choice, Caliburn.Micro, provides a simple Dependency Injection container, where you have to register all your ViewModels and Services. This is done in the Bootstraper&amp;#8217;s Configure method and may look like this:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;where you typically register your ViewModels as per request and services as singletons.&lt;/p&gt;

&lt;p&gt;Of course this is done just once, but having to register a ViewModel each time you create a new one can be a nuisance, especially in a large project.&lt;/p&gt;

&lt;p&gt;There is a better way that uses reflection. First, you need to create attributes that will represent registration as per request and a s singleton:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=PerRequest.cs&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=Singleton.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Iterating over all the non-abstract classes in your assemblies using reflection is quite easy, the tricky part is deciding when to register a class as &amp;#8220;itself&amp;#8221; and when to register it for an interface it implements. My rule of thumbs is that if the class implements exactly one interface, it is one of my services and I register it for that interface, otherwise I register it as itself (ViewModels descendant from Screen implement circa 5 interfaces).&lt;/p&gt;

&lt;p&gt;The final registration code looks different for WinRT (Windows 8, Windows 8.1, Windows Phone 8.1 XAML)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and for &amp;#8220;classic&amp;#8221; .NET (Windows Phone 8)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg3.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;because of reflection differences in WinRT. Do not forget to add the PerRequest or Singleton attribute to your classes to make it work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crawling mobile app stores with F#</title>
      <link>https://blog.kulman.sk/crawling-mobile-app-stores-with-f/</link>
      <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/crawling-mobile-app-stores-with-f/</guid>
      <description>&lt;p&gt;Some time ago I needed a way to programatically search the Apple AppStore and Google Play Store to get some info about apps for a project. I decided to write an F# script for that task and later added support for Windows Phone Store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted the script to be easily usable from outside of F# so first I created a type for the app.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/10019990.js?file=types.fs&#34;&gt;&lt;/script&gt;

&lt;p&gt;I also needed a helper function to download data from the web. I used a classic WebClient with user agent set to Chrome, because the Windows Phone Store API requires a user agent header&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/10019990.js?file=net.fs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Apple AppStore&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searching in Apple AppStore is easy, because Apple provides a simple search API that returns JSON. Thanks to the JsonProvider from FSharp.Data, the code is really simple&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/10019990.js?file=AppStore.fs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Just downloading the JSON transforming the data to our type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Searching in Google Play Store is a bit more of a challenge. There is no API I could found so I had to parse the html returned from the web version of Google Play Store. The web can change at any time so I need to be aware of this fact and fix the method if it happens.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/10019990.js?file=PlayStore.fs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Another problem with parsing the web is that there is no way to return search result for a specific country like for Apple AppStore. The web always shows results according to your IP address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows Phone Store&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is no official API for searching the Windows Phone Store but I was given a tip obtained after sniffing the traffic from a Windows Phone, so I did not have to parse the web. The code is as simple as for Apple AppStore thanks to XmlProvider.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/10019990.js?file=WindowsPhoneStore.fs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using F# is fun and processing data is really simple thanks to type provides. You can find it whole code at &lt;a href=&#34;https://github.com/igorkulman/AppStoreCrawler&#34;&gt;https://github.com/igorkulman/AppStoreCrawler&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing in-app purchases in Windows Phone</title>
      <link>https://blog.kulman.sk/testing-in-app-purchases-in-windows-phone/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kulman.sk/testing-in-app-purchases-in-windows-phone/</guid>
      <description>&lt;p&gt;Windows Phone Store does not offer developers any sandbox to test in-app purchases in their apps, like stores on other platforms do. If you want test in-app purchases in your Windows Phone apps, you need to use other options.&lt;/p&gt;

&lt;p&gt;To make in-app purchases implementation easier, I created a simple Windows Phone Store service interface in my &lt;a href=&#34;https://github.com/igorkulman/Kulman.WP8&#34;&gt;Kulman.WP8&lt;/a&gt; library (also &lt;a href=&#34;http://www.nuget.org/packages/Kulman.WP8/&#34;&gt;available on Nuget&lt;/a&gt;)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/9571908.js?file=IWindowsPhoneStoreService.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Private beta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you publish your app as a private beta and add the in-app products, you can test them. All the in-app purchases are always free in this scenario. The disadvantage is that you cannot debug anything, it either works or it does not (if you use my &lt;a href=&#34;https://github.com/igorkulman/Kulman.WP8/blob/master/Kulman.WP8/Services/WindowsPhoneStoreService.cs&#34;&gt;implementation from Kulman.WP8&lt;/a&gt;, it should :).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real app testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your app is already in the Windows Phone Store, create an in-app product and try to buy it from your app run from Visual Studio, you may be wondering, why you are getting an error. The problem is that the app run from Visual Studio has a different app id from the app in Windows Phone Store. If you change the app id in the manifest to the app id state in Windows Phone Store (the details view), you will be able to make a real in-app purchase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mocking library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To mock in-app purchases you can use the &lt;a href=&#34;http://code.msdn.microsoft.com/wpapps/Mock-In-App-Purchase-33080f0c&#34;&gt;Mock In-App Purchase Library&lt;/a&gt;. To make testing easier, implement my interface using this library&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/9571846.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;And setup the products you want to use at your app startup&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/9571908.js?file=SetupMockIAP.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The advantage of this approach is that you just switch the IWindowsStoreService implementation between then mock on and the &lt;a href=&#34;https://github.com/igorkulman/Kulman.WP8/blob/master/Kulman.WP8/Services/WindowsPhoneStoreService.cs&#34;&gt;real one&lt;/a&gt;, depending on the situation. For example (Caliburn.Micro Bootstrapper)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/9571908.js?file=IAP.cs&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>