<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Coding Journal</title>
    <link>http://localhost:1313/tags/visual-studio/</link>
    <description>Recent content in Visual Studio on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/visual-studio/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Visual Studio extensions to make your life easier</title>
      <link>http://localhost:1313/visual-studio-extensions-to-make-your-life-easier/</link>
      <pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/visual-studio-extensions-to-make-your-life-easier/</guid>
      <description>&lt;p&gt;This blog post is inspired by the &lt;a href=&#34;http://hmemcpy.com/2015/10/7-open-source-visual-studio-extensions-to-make-your-life-easier/&#34;&gt;7 open-source Visual Studio Extensions to make your life easier&lt;/a&gt; article. In the article Igal Tabachnik showed his favorite Visual Studio extensions, that were quite interesting. I also use a few Visual Studio extensions that make my life easier, so I decided to share.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/e792686d-542b-474a-8c55-630980e72c30&#34;&gt;Indent Guides&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Small and simple extension with just one task, displaying indent and page width guides in Visual Studio text editor windows. There are three styles of guides: solid, dotted and dashed, available in thin and thick varieties and customizable color.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/guides.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496&#34;&gt;VSColorOutput&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;VSColorOutput can change the color of a line emitted to the output window based on specified rules. The rules consist of regular expressions. Rules map to classifications which in turn map to colors. The default patterns will color build errors in red, warnings in yellow/gold and successful build messages in green. It also colors the output of debug messages when running an app, so you can easily sort exceptions and your custom debug messages containing certain words.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://visualstudiogallery.msdn.microsoft.com/f4d9c2b5-d6d7-4543-a7a5-2d7ebabc2496/image/file/63101/9/screenshot.png?Id=63101&#34; alt=&#34;VSColorOutput&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/f3f23845-5b1e-4811-882f-60b7181fa6d6&#34;&gt;Rename Visual Studio Windows Title&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default, Visual Studio shows the name of the opened solution name in the title. This makes it easier to navigate among multiple instances of Visual Studio. You see the solution name next to the Visual Studio icon in the taskbar and also in the task manager, when you have to (and we all sometimes have to) kill the right Visual Studio because it stopped responding. You can use it with Git and show the branch or any other info. For more information about this extension, see a &lt;a href=&#34;http://blog.kulman.sk/quick-tip-showing-solution-branch-name-in-visual-studio-title/&#34;&gt;separate blog post I wrote&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/trayalya.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/03448836-db42-46b3-a5c7-5fc5d36a8308&#34;&gt;AsyncFixer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AsyncFixer helps developers in finding and correcting 3 common async/await misuses. AsyncFixer was tested with hundreds of C# apps and successfully handles many corner cases. AsyncFixer will work just in the IDE and work as an analyzer on every project you open in Visual Studio. It can also operate in batch mode to correct all misuses in the document, project, or solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/asyncfixer-1.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tip: Showing solution branch name in Visual Studio title</title>
      <link>http://localhost:1313/quick-tip-showing-solution-branch-name-in-visual-studio-title/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/quick-tip-showing-solution-branch-name-in-visual-studio-title/</guid>
      <description>&lt;p&gt;By default, Visual Studio shows the name of the opened solution name in the title. This makes it easier to navigate among multiple instances of Visual Studio. You see the solution name next to the Visual Studio icon in the taskbar and also in the task manager, when you have to (and we all sometimes have to) kill the right Visual Studio because it stopped responding.&lt;/p&gt;

&lt;p&gt;I work with Git, switching branches frequently, especially working on features and bug fixes. In this situation, it would be nice if Visual Studio showed not only the solution name but also the current branch in its title. No problem, there is an extension for that.&lt;/p&gt;

&lt;p&gt;The extension is called &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/f3f23845-5b1e-4811-882f-60b7181fa6d6&#34;&gt;Rename Visual Studio Window&lt;/a&gt; and it works with Visual Studio 2015, 2013, 2012, 2010. This extension supports Git, so you can easily add the branch name to the title with a config like mine using [gitBranchName].&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/rename.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;Your taskbar will then look like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/trayalya.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the DebuggerDisplay attribute for better debugging experience</title>
      <link>http://localhost:1313/using-the-debuggerdisplay-attribute-for-better-debugging-experience/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/using-the-debuggerdisplay-attribute-for-better-debugging-experience/</guid>
      <description>&lt;p&gt;When debugging a C# program in Visual Studio, I tend to always hover over the variables to glance at their values and structure instead of explicitly writing their names into the watch window. If I want to explore say a collection, I need to unfold each of the items using the + button to get an idea about the data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/debug1.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;This is not very comfortable, so thankfully, there is a way to make this experience better, using the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerdisplayattribute(v=vs.110).aspx&#34;&gt;DebuggerDisplay&lt;/a&gt; attribute. This attribute can be applied to any class (and struct, enum, property, field, delegate, assembly) and allows you to define the information about the class you wanto to see in the debugger.&lt;/p&gt;

&lt;p&gt;Give the attribute a string to be displayed and in this string you can reference any data from the class:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/7640468.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;When you hover over the data now, you will see a nice readable &amp;#8220;labels&amp;#8221;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/debug2.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;If you do not want to add the DebuggerDisplay attribute to all your classes manually, you can use the &lt;a href=&#34;https://github.com/Fody/Visualize&#34;&gt;Visualize&lt;/a&gt; addin for &lt;a href=&#34;https://github.com/Fody/Fody&#34;&gt;Fody&lt;/a&gt;. Visualize will add the DebuggerDisplay atribute to all your classes, using all the classe&amp;#8217;s properties in the &amp;#8220;label&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: showing this &amp;#8220;labels&amp;#8221; takes some time, so do not reference to many data fields.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio Achievements: a bit of gamification to your programming</title>
      <link>http://localhost:1313/visual-studio-achievements-a-bit-of-gamification-to-your-programming/</link>
      <pubDate>Thu, 03 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/visual-studio-achievements-a-bit-of-gamification-to-your-programming/</guid>
      <description>&lt;p&gt;Gamification is a great concept that works really well for some people, including me. Gamification may very well be the reason for success of projects like &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;StackOveflow&lt;/a&gt; or &lt;a href=&#34;http://duolingo.com/&#34;&gt;Duolingo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visual Studio Achievements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://visualstudiogallery.msdn.microsoft.com/bc7a433b-b594-48d4-bba2-a2f24774d02f&#34;&gt;Visual Studio Achievements&lt;/a&gt; is Visual Studio plugin that rewards you for good practices like having 1000 localized values (&lt;a href=&#34;https://channel9.msdn.com/achievements/visualstudio/MoreThan1000LOC&#34;&gt;Localization Master&lt;/a&gt;) and even for bad practices like writin a single line of 300 characters long (&lt;a href=&#34;https://channel9.msdn.com/achievements/visualstudio/LongerThan300LocAchievement&#34;&gt;Scroll Bar Wizard&lt;/a&gt;). For some of the achievements you need to have FxCop installed, but the majority get awareded without the need for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/VisualStudio_badges_2.jpg&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;You can find out interesting information about your programming, check out &lt;a href=&#34;https://channel9.msdn.com/niners/igorkulman/achievements/visualstudio&#34;&gt;my profile&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updating Azure Toolkit is always a pain</title>
      <link>http://localhost:1313/updating-azure-toolkit-is-always-a-pain/</link>
      <pubDate>Fri, 26 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/updating-azure-toolkit-is-always-a-pain/</guid>
      <description>&lt;p&gt;From time to time I need to develop or maintain a small Windows Azure project. This time I wanted to create the whole project in F#. The first thing I needed to to was to update the Azure toolkit 1.8 (October 2012) but updating Azure Toolkit is always a pain. I started Web Platform Installer, selected Azure Toolkit 1.8, Azure Tools 1.8 for VS2012 and installed everything including the dependencies. What was the result? The whole Azure integration in Visual Studio 2012 stopped working. The Azure templates completely disappeared and Visual Studio only offered me downloading the Azure Toolkit, which failed, because it was already installed. I ended up completely uninstalling everything with the name containing Azure and installing the Azure toolkit again using the link from Visual Studio.&lt;/p&gt;

&lt;p&gt;Why cannot this work better?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>