<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Caliburn.Micro &middot; Coding Journal</title>

    <meta name="description" content="Adventures in the world of C#, F# and WinRT">

    <meta name="generator" content="Hugo 0.14" />
    <meta name="twitter:card" content="summary">
    
    <meta name="twitter:title" content="Caliburn.Micro &middot; Coding Journal">
    <meta name="twitter:description" content="Adventures in the world of C#, F# and WinRT">

    <meta property="og:type" content="article">
    <meta property="og:title" content="Caliburn.Micro &middot; Coding Journal">
    <meta property="og:description" content="Adventures in the world of C#, F# and WinRT">

    <link href='//fonts.googleapis.com/css?family=Source+Sans+Pro:400,700|Oxygen:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/pure/0.6.0/pure-min.css">
    <!--[if lte IE 8]>
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/pure/0.6.0/grids-responsive-old-ie-min.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
        <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/pure/0.6.0/grids-responsive-min.css">
    <!--<![endif]-->

    <link rel="stylesheet" href="http://igorkulman.github.io/coding-journal/css/all.min.css">
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">

    <link rel="alternate" type="application/rss+xml" title="Coding Journal" href="http://igorkulman.github.io/coding-journal/index.xml" />
</head>
<body>


<div id="layout" class="pure-g">
    <div class="sidebar pure-u-1 pure-u-md-1-4">
    <div class="header">
        <hgroup>
            <h1 class="brand-title"><a href="http://igorkulman.github.io/coding-journal">Coding Journal</a></h1>
            <h2 class="brand-tagline"> Adventures in the world of C#, F# and WinRT </h2>
        </hgroup>

        <nav class="nav">
            <ul class="nav-list">
                
                <li class="nav-item">
                    <a class="pure-button" href="https://twitter.com/igorkulman"><i class="fa fa-twitter"></i> Twitter</a>
                </li>
                
                
                <li class="nav-item">
                    <a class="pure-button" href="https://github.com/igorkulman "><i class="fa fa-github-alt"></i> github</a>
                </li>
                
                <li class="nav-item">
                    <a class="pure-button" href="http://igorkulman.github.io/coding-journal/index.xml"><i class="fa fa-rss"></i> rss</a>
                </li>
            </ul>
        </nav>

<div>
<h2>About me</h2>

<p>Igor Kulman is currently working as Windows Phone developer, also building applications for Microsoft Azure and playing with F#.</p>
<p>
Interested in programming languages, functional programming and data science.</p>

</div>

    </div>
</div>


    <div class="content pure-u-1 pure-u-md-3-4">
        <div>
            
            <div class="posts">
                
                <h1 class="content-subhead">03 Nov 2014, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/visual-studio-template-for-caliburn-micro-windows-phone-apps/" class="post-title">Visual Studio template for Caliburn.Micro Windows Phone apps</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-Windows Phone" href="http://igorkulman.github.io/coding-journal/categories/windows-phone">Windows Phone</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>I have been building Windows Phone apps using the <a href="https://github.com/Caliburn-Micro/Caliburn.Micro">Caliburn.Micro</a> framework for some time now. Setting up a new project takes some time and can be easily automated, so I decided to create a Visual Studio template for Windows Phone apps build with Caliburn.Micro.</p>

<p>The templates can be downloaded from <a href="https://visualstudiogallery.msdn.microsoft.com/21b4568e-1fb9-4881-9d51-8e1ea0160a9f">the Visual Studio Extensions gallery</a> and used to build Windows Phone 8 and Windows Phone 8.1 Silverlight apps. It contains the basic setup with Caliburn Micro and <a href="http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/" title="INotifyPropertyChanged the easy way in Windows Phone and Windows 8">Fody</a>, with a sample view and viewmodel.</p>

<p>The <a href="https://github.com/igorkulman/CaliburnWP8AppVSIX">source code is available on GitHub</a>, so if you want to modify it to best suit your needs, feel free to do it.</p>

                    </div>
                </section>
                
                <h1 class="content-subhead">23 Jul 2014, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/automatic-viewmodels-and-services-registration-for-not-only-caliburn-micro/" class="post-title">Automatic ViewModels and Services registration for (not only) Caliburn.Micro</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-Windows Phone" href="http://igorkulman.github.io/coding-journal/categories/windows-phone">Windows Phone</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>My MVVM framework of choice, Caliburn.Micro, provides a simple Dependency Injection container, where you have to register all your ViewModels and Services. This is done in the Bootstraper&#8217;s Configure method and may look like this:</p>

<script src="https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg1.cs"></script>

<p>where you typically register your ViewModels as per request and services as singletons.</p>

<p>Of course this is done just once, but having to register a ViewModel each time you create a new one can be a nuisance, especially in a large project.</p>

<p>There is a better way that uses reflection. First, you need to create attributes that will represent registration as per request and a s singleton:</p>

<script src="https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=PerRequest.cs"></script>

<script src="https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=Singleton.cs"></script>

<p>Iterating over all the non-abstract classes in your assemblies using reflection is quite easy, the tricky part is deciding when to register a class as &#8220;itself&#8221; and when to register it for an interface it implements. My rule of thumbs is that if the class implements exactly one interface, it is one of my services and I register it for that interface, otherwise I register it as itself (ViewModels descendant from Screen implement circa 5 interfaces).</p>

<p>The final registration code looks different for WinRT (Windows 8, Windows 8.1, Windows Phone 8.1 XAML)</p>

<script src="https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg2.cs"></script>

<p>and for &#8220;classic&#8221; .NET (Windows Phone 8)</p>

<script src="https://gist.github.com/igorkulman/0353b26073fc11d3635f.js?file=reg3.cs"></script>

<p>because of reflection differences in WinRT. Do not forget to add the PerRequest or Singleton attribute to your classes to make it work.</p>

                    </div>
                </section>
                
                <h1 class="content-subhead">23 Apr 2014, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/making-your-windows-phone-silverlight-8-1-app-a-share-contract-target/" class="post-title">Making your Windows Phone Silverlight 8.1 app a Share Contract target</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-Windows Phone" href="http://igorkulman.github.io/coding-journal/categories/windows-phone">Windows Phone</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>Windows Phone 8.1 introduced many interesting new thing, the one I personally like the best as a developer is the Share Contract. The Share Contract allows your apps to share data using an unified and easy way and also to receive data from other apps. This functionality is important for my <a href="http://t.co/YMtrM84rwI">Pock8</a> app, which is a Pocket client. By making Pock8 app a Share Contract target, the app can receive links from other apps, more importantly from the built-in webrowser (IE). This makes the app even more easy to use and valuable.</p>

<p><img src="/images/wp81.png" alt="" class="pure-img" ></p>

<p>The problem is that <a href="http://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh871367.aspx">all the documentation I found</a> and also <a href="http://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh871363.aspx">the sample app</a> are for Windows Runtime. Pock8 is a Silverligt app and I have no intentions to rewrite it to Windows Runtime.</p>

<p>I had to make some digging and I finally found the solution in a build video called <a href="http://channel9.msdn.com/Events/Build/2014/2-520">Contracts and Pickers: Building Apps that Work Together on Windows</a>.</p>

<p>First you have to add the <strong>Share Contract</strong> ability to the new manifest file (Package.appxmanifest, the Declarations tab). If you want to receive links, Choose <strong>weblink</strong> as data format. This step is the same for Windows Runtime and for Silverlight apps, but all the other steps differ.</p>

<p>You can determine if your application was launched normally or as a Share Contract target in the application Launching event. If you cast the <strong>LaunchingEventArgs</strong> to <strong>ShareLaunchingEventArgs</strong> and the result is not null, your application was launched as a Share Contract target. The video recommend creating an internal property of type <strong>ShareOperation</strong> in App.xaml.cs and saving the data from <strong>ShareLaunchingEventArgs</strong> there:</p>

<script src="https://gist.github.com/igorkulman/11111043.js?file=AssociationUriMapper.cs"></script>

<p>(I use Caliburn.Micro so I do it in the OnLaunch method of the Bootstrapper)</p>

<p>The next thing to do is to show a separate sharing page instead of the page you would normally show when your app starts. Create a <strong>AssociationUriMapper</strong> like you <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj206987(v=vs.105).aspx">would do when registering for a protocol</a> and simply check the <strong>ShareOperation</strong> property in App.xaml.cs:</p>

<p>If you use Caliburn.Micro as I do, do not forget to register the AssociationUriMapper in the Boostrappers CreatePhoneApplicationFrame method:</p>

<script src="https://gist.github.com/igorkulman/11111043.js?file=CreatePhoneApplicationFrame.cs"></script>

                    </div>
                </section>
                
                <h1 class="content-subhead">14 Mar 2014, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/pock8-beautiful-pocket-client-for-windows-phone/" class="post-title">Pock8: beautiful Pocket client for Windows Phone</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-Windows Phone" href="http://igorkulman.github.io/coding-journal/categories/windows-phone">Windows Phone</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>Recently I have released a new Windows Phone app called <a href="http://t.co/YMtrM84rwI">Pock8</a>. Pock8 is a beautiful Pocket (formerly Read It Later) client for Windows Phone. The design of the app was created by Jan Marek who worked with my on the <a href="http://windowsphone.com/s?appid=b2667b3c-9272-4416-b0be-c8adadc651e4">Shopping List Simple</a> app.</p>

<p><img src="/images/pocket.png" alt="" class="pure-img" ></p>

<p>Our goal was to create a Pocket client that would be really easy to use and that would have a nice and simple design. I think we have achieved our goal. The main features of the app are</p>

<ul>
<li>clean and simple design</li>
<li>optimized article view for comfortable reading</li>
<li>article cache for offline reading</li>
<li>dark theme for OLED screens or reading in the dark</li>
<li>support for receiving articles from other apps like WPCentral</li>
<li>listening to articles aloud</li>
<li>sharing articles</li>
</ul>

<p>In version 1.2 we really concentrated on user feedback and added many features that our users requested. We love and users and want to make them happy.</p>

<p>The app is free to use with one limitation, all the list display just 5 articles at any time. You can use an in-app purchase to get rid of the limitation and support further development of the app.</p>

<p>For more info about <a href="http://t.co/YMtrM84rwI">Pock8</a>, follow the app on Twitter at <a href="https://twitter.com/pock8app">@pock8app</a>.</p>

<p><img src="http://qrcode.kaywa.com/img.php?s=6&#038;d=http%3A%2F%2Fwindowsphone.com%2Fs%3Fappid%3Dc00715a7-d2d4-48c1-94e2-2ecc7c1b798b" alt="Pock8" style="max-width:100px" /></p>

                    </div>
                </section>
                
                <h1 class="content-subhead">02 Dec 2013, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/creating-a-search-box-with-reactive-extensions-and-mvvm/" class="post-title">Creating a Search box with Reactive Extensions and MVVM</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-Windows Phone" href="http://igorkulman.github.io/coding-journal/categories/windows-phone">Windows Phone</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>Having a Search box in a Windows Phone app is a common use-case but it is only rarely done right. A good Search box does not have a Search button associated with it that the users have to click when they are finished typing and want to start the search. A good Search box starts the search immediately when the user stops typing (for a certain period of time).</p>

<p>You can implement this functionality with some nasty code using a DispatcherTimer, or you can use <a href="http://msdn.microsoft.com/en-us/data/gg577609.aspx">Reactive Extensions</a>. You can use Reactive Extensions directly on a TextBox representing the Search box, but if you use MVVM (and you should) you need to attach to the property associated with the Search box instead.</p>

<p>Suppose the ViewModel contains a string property called SearchTerm (with two-way binding to the Search box) and an event called PropertyChanged (used for the INotifyPropertyChanged implementation). We need to observe the changes of the SearchTerm property. There is no way to do it directly, we need to observe the PropertyChanged event instead.</p>

<p>We need to create an observable from the PropertyChanged event, subscribe to it filtering only the PropertyChanged calls regarding the SearchTerm property, throttling for 0.5 seconds</p>

<p>Using the throttle operator we will get exactly the desired behaviour of executing the Search method 0.5 seconds after the user stopped typing.</p>

<p><script src="https://gist.github.com/7657908.js"></script></p>

<p>However, there is a small problem. The SearchTerm property changes (and fires the PropertyChanged event) only when the Search box loses focus. We need to make the SearchTerm property change after each letter typed instead. In WPF that would be trivial using UpdateTrigger, but Windows Phone does not support UpdateTrigger.</p>

<p>We need to create a custom binding utility</p>

<p><script src="https://gist.github.com/7657969.js"></script></p>

<p>and apply it to the Search box</p>

<p><script src="https://gist.github.com/7658031.js"></script></p>

                    </div>
                </section>
                
                <h1 class="content-subhead">18 Sep 2013, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/developing-windows-store-apps-with-caliburn-micro-part-4-services-and-dependency-injection/" class="post-title">Developing Windows Store apps with Caliburn Micro Part 4: services and dependency injection</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-WinRT" href="http://igorkulman.github.io/coding-journal/categories/winrt">WinRT</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>In this installment of the series I will show you how user data services. We will finally use the Unity DI container that is part of the project setup.</p>

<p><strong>Data and Services</strong></p>

<p>In next installment we will be showing a list of products, so let&#8217;s create a simple Product class first in the Data directory:</p>

<p><script src="https://gist.github.com/6606102.js"></script></p>

<p>PropertyChangedBase is a base class implementing the INotifyPropertyChanged interface and the ImplementPropertyChanged attribute makes sure it&#8217;s method is called for all the property changes. (More about Fody <a href="http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/" title="INotifyPropertyChanged the easy way in Windows Phone and Windows 8">here</a>)</p>

<p>All the operations will be handled by a service implementing the IProductService interface:</p>

<p><script src="https://gist.github.com/6606127.js"></script></p>

<p>You can implement this interface any way you want. To keep things simple I chose an implementation with two hardcoded products:</p>

<p><script src="https://gist.github.com/6606170.js"></script></p>

<p><strong>Registering services</strong></p>

<p>All our services need to be registered with the Unity DI container before being used. The place to do it is the App class (App.xaml.cs file). You can override the Configure method to do it:</p>

<p><script src="https://gist.github.com/6607482.js"></script></p>

<p>This registers the ProductService class to the IProductService interface. The new ContainerControlledLifetimeManager() parameter is Unity&#8217;s way of setting the registration to be a singleton.</p>

<p><strong>Injecting services into ViewModel</strong></p>

<p>Injecting the ProductService into our MainViewModel is very simple. Just declare a IProductService variable and initialize it from constructor. Unity will take care of the rest:</p>

<p><script src="https://gist.github.com/6607538.js"></script></p>

<p>Next time we will implement a typical master-detail scenario showing products usign the ProductService whe have created. All the code is again <a href="https://github.com/igorkulman/CaliburnDemoWinRT">available at GitHub</a>.</p>

                    </div>
                </section>
                
                <h1 class="content-subhead">13 Aug 2013, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/developing-windows-store-apps-with-caliburn-micro-part-3-saving-and-restoring-state/" class="post-title">Developing Windows Store apps with Caliburn Micro Part 3: saving and restoring state</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-WinRT" href="http://igorkulman.github.io/coding-journal/categories/winrt">WinRT</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>In the <a href="http://blog.kulman.sk/developing-windows-store-apps-with-caliburn-micro-part-2-navigation/" title="Developing Windows Store apps with Caliburn Micro Part 2: navigation">previous post</a> I stated that a well-behaved Windows Store app should remeber the View the user navigated to before suspension and navigate to this View upon next run. The View can contain some input that the user can fill in. A well-behaved Windows Store app should remember the user&#8217;s input and restore it after suspension.</p>

<p><strong>Saving and restoring state</strong></p>

<p>Implementation of the above-mentioned scenario is not very complicated, thanks to the project setup. If you want your ViewModel to be able to save and restore state, implement the IHaveState interface. It contains two method that you can override; SaveState and LoadState. In bith method you have access to a page state dictionary that you can use to save and load the state.</p>

<p>Let us reuse the SecondPageViewModel from the last post. Implement IHaveState, add two string properties and use the SaveState and LoadState method to save and load them using the page state dictionary</p>

<p><script src="https://gist.github.com/6173564.js"></script></p>

<p>To test it, first add two TextBoxes to the SecondPageView with two-way binding</p>

<p><script src="https://gist.github.com/6173636.js"></script></p>

<p>Now run the application, navigate to the SecondPageViewModel and fill in the TextBoxes. Switch to Visual Studio and invoke the Suspend and Shutdown command. When you run the application again, you will see the SecondPageViewModel with TextBoxes with the same values as before the suspension.</p>

<p>The code is again <a href="https://github.com/igorkulman/CaliburnDemoWinRT">available at Github</a>. If you are interested in the implementation of saving and loading state, read <a href="http://nybbles.blogspot.cz/2013/02/winrt-caliburnmicro-and-ioc-part-3.html">this article</a>.</p>

                    </div>
                </section>
                
                <h1 class="content-subhead">06 Aug 2013, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/developing-windows-store-apps-with-caliburn-micro-part-2-navigation/" class="post-title">Developing Windows Store apps with Caliburn Micro Part 2: navigation</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-WinRT" href="http://igorkulman.github.io/coding-journal/categories/winrt">WinRT</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>In this second part you will add another ViewModel and View and implement navigation between two ViewModels, including saving the navigation state between starts. The code is as always <a href="https://github.com/igorkulman/CaliburnDemoWinRT">available at Github</a>.</p>

<p><strong>Invoking ViewModel methods</strong></p>

<p>If you want to test out navigation between ViewModels, you first need something that will trigger the navigation. The easiest way to do this is to use a standard Button. If you do MVVM &#8220;by hand&#8221;, you are probably used to creating ICommand properties and binding them to the Button&#8217;s Command dependency property.</p>

<p>Caliburn Micro offers an easier way. If you want a Button to invoke a method on your ViewModel, just the give the button the same name as the name of the button. The method should be public void.</p>

<p>On the MainViewModel, create a public void GoToSecondPage method:</p>

<p><script src="https://gist.github.com/6103983.js"></script></p>

<p>In the MainView create a Button with x:Name=&#8221;GoToSecondPage&#8221;. When you start the application and click the button, a message dialog is shown, so you know the autobinding beetween your Button and your GoToSecondPage method works.</p>

<p><strong>Navigation</strong></p>

<p>As you may have noticed, a INavigationService is injected into the MainViewModel&#8217;s constructor. You can use this INavigationService to navigate between ViewModels.</p>

<p>In the ViewModels folder create a new ViewModel called SecondPageViewModel with one string property Title (exactly the same as the MainViewModel):</p>

<p><script src="https://gist.github.com/6103938.js"></script></p>

<p>In the Views folder, create a new View called SecondPageView as a Blank Page. Give it some colorful background so it is clearly distinguishable from the MainView:</p>

<p><script src="https://gist.github.com/6104005.js"></script></p>

<p>Now you can finally make the GoToSecondPage method navigate the user to the SecondPageViewModel. To do this, first get the Uri from the INavigationService using the strongly typed UriFor&lt;.&gt; method and then call the Navigate method:</p>

<p><script src="https://gist.github.com/6104023.js"></script></p>

<p><strong>Navigation with parameters</strong></p>

<p>In many cases you need to navigate to a ViewModel passing the ViewModel some parameters. This is as easy as adding a call to WithParam to your navigation code:</p>

<p><script src="https://gist.github.com/6104042.js"></script></p>

<p>You can use the WithParam method to give the ViewModel as many parameters as you want.</p>

<p><strong>Saving and loading navigation state</strong></p>

<p>A well-behaved Windows Store application should remember the last ViewModel active when the user exited the app and load this ViewModel when the user starts the application again. In our demo, this is not the case. You can test it by navigating to the SecondPageViewModel, switching to Visual Studio, using the Suspend and Shutdown option and starting the application again.</p>

<p>You need to fix this so when the suspended application starts again, it will show the SecondPageViewModel (unless the MainViewModel was active when the application was suspended). The Caliburn.Micro.Unity.WinRT package already contains the support for saving and restoring state.</p>

<p>First you need to make the Views inherit from the Caliburn.Micro.Unity.WinRT.Code.AppPage insted of Page and delete theirs OnNavigateTo methods. Then you need to explicitly save the state when the application starts. Open the App.xaml.cs and add the following method:</p>

<p><script src="https://gist.github.com/6104122.js"></script></p>

<p>If you now navigate to second page, suspend and shutdown the application and start it again, you will see the second page.</p>

<p>There is currently no way to navigate back from the SecondPageViewModel to the MianViewModel. I am fairly confident you can implement it by yourself using the INavigationService&#8217;s GoBack method.</p>

                    </div>
                </section>
                
                <h1 class="content-subhead">30 Jul 2013, 00:00</h1>
                <section class="post">
                    <header class="post-header">

                        <a href="http://igorkulman.github.io/coding-journal/developing-windows-store-apps-with-caliburn-micro-part-1-setup-and-first-view/" class="post-title">Developing Windows Store apps with Caliburn Micro Part 1: setup and first view</a>

                        <p class="post-meta">
                            
                                By <strong class="post-author">Igor Kulman</strong>
                            
                            
                                under 
                                
                                <a class="post-category post-category-WinRT" href="http://igorkulman.github.io/coding-journal/categories/winrt">WinRT</a>
                            
                        </p>
                    </header>

                    <div class="post-description">
                        <p>I have been developing Windows Store apps for some time. I have always used MVVM, but mostly &#8220;my own&#8221; MVVM. I have finally decided to use a &#8220;real&#8221; MVVM framework and I have chosen Caliburn Micro, because I did not like MVVM very much. In this article I am going to show you how to use Caliburn Micro, Unity and Fody to develop Windows Store apps.</p>

<p><strong>Caliburn Micro</strong></p>

<p><a href="https://caliburnmicro.codeplex.com/">Caliburn Micro</a> is a small, yet powerful framework, designed for building applications across all Xaml Platforms. With strong support for MVVM and other proven UI patterns, Caliburn.Micro will enable you to build your solution quickly, without the need to sacrifice code quality or testability.</p>

<p><strong>Unity</strong></p>

<p>When I started with Calibun Micro I discovered an <a href="http://nybbles.blogspot.cz/2013/02/winrt-caliburnmicro-and-ioc-part-3.html">article by Thomas Baker about using Unity as DI container with Caliburn Micro</a>. His article also contains code that makes it easy for you to save and load state when the app gets suspended. With his permission, I have <a href="https://nuget.org/packages/Caliburn.Micro.Unity.WinRT/">created a Nuget package</a> from his code, this article is going to use this package.</p>

<p><strong>Fody</strong></p>

<p>I have been using <a href="https://github.com/Fody/Fody">Fody</a> with Windows Phone and Windows Store apps for some time now. I especially use the <a href="https://github.com/Fody/PropertyChanged">INotifyPropertyChanged weaver</a> I <a href="http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/" title="INotifyPropertyChanged the easy way in Windows Phone and Windows 8">wrote about earlier</a>. Check the article for more information if you are not already familliar with Fody.</p>

<p><strong>Application setup</strong></p>

<p>Let&#8217;s start buidling a simple demo application. This demo application will show you how little code you need to write to get something done when using the mentioned libraries.</p>

<p>Create a Blank App. Add the <a href="http://www.nuget.org/packages/Caliburn.Micro.Unity.WinRT/">Caliburn.Micro.Unity.WinRT</a> package from Nuget. It will install all the dependencies you need. Install <a href="http://www.nuget.org/packages/PropertyChanged.Fody/">PropertyChanged.Fody</a> from Nuget. Next you need to hook up PropertyChanged.Fody with Fody. Open FodyWeavers.xml and change it to</p>

<p><script src="https://gist.github.com/6088620.js"></script></p>

<p>PropertyChanged.Fody now knows that it should call the NotifyOfPropertyChange method from Caliburn Micro when a property gets changed. Let&#8217;s do some cleanup next. Delete MainPage.xaml, rename the Common folder to Resources and create a few additional folders:</p>

<ul>
<li>Views</li>
<li>ViewModels</li>
<li>Data</li>
<li>Converters</li>
<li>Services</li>
<li>Code</li>
</ul>

<p>Next make you app inherit from CaliburnUnityApplication by changing App.xaml to</p>

<p><script src="https://gist.github.com/6088861.js"></script></p>

<p>and cleaning up and changing App.xaml.cs to</p>

<p><script src="https://gist.github.com/6088871.js"></script></p>

<p><strong>First ViewModel</strong></p>

<p>Now you can create your first ViewModel and your first View. Caliburn Micro uses a naming convention to pair a ViewModel and a View. Create a new class called MainViewModel in the ViewModels folder. Make the class inherit from ViewModelBase and implement the default constructor:</p>

<p>create a new string property called Title. Add the ImplementPropertyChanged attribute to the class. This makes NotifyPropertyChanged.Fody call the NotifyOfPropertyChange whenever any of the properties (just Title for now) changes. Assing some text to the Title property in the constructor:</p>

<p><script src="https://gist.github.com/6088988.js"></script></p>

<p><strong>First View</strong></p>

<p>Now create a view for the MainViewModel as a Blank Page. According to the naming conventions, it needs to be called MainView and created in the Views folder. Add a TextBlock to the View. To bind the text of this TextBlock to the Title property, you could use Text=&#8221;{Binding Title}&#8221;. This works just fine but you do not have to do it. Just name the TextBlock the same as the property you want it to bind to (in our case Title):</p>

<p><script src="https://gist.github.com/6089012.js"></script></p>

<p><strong>Navigating to the view</strong></p>

<p>There is only one more thing left to do. You need to tell the framework to navigate to the MainView when the app starts. This is done in the OnLaunched method in App.xaml.cs</p>

<p><script src="https://gist.github.com/6089032.js"></script></p>

<p><strong>Run you app</strong></p>

<p>Hit F5 and you will see your app start, navigate to MainView and show the text from the Title property in this view.</p>

<p>You can find the <a href="https://github.com/igorkulman/CaliburnDemoWinRT">code on Github</a> and stay tuned for Part 2!</p>

                    </div>
                </section>
                
            </div>
            

            <div class="footer">
    <div class="pure-menu pure-menu-horizontal pure-menu-open">
        <ul>
            <li>Powered by <a class="hugo" href="http://hugo.spf13.com/" target="_blank">hugo</a></li>
        </ul>
    </div>
</div>
<script src="http://igorkulman.github.io/coding-journal/js/all.min.js"></script>
        </div>
    </div>
</div>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-49528577-2', 'auto');
ga('send', 'pageview');

</script>

</body>
</html>
