<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fody on Coding Journal</title>
    <link>http://blog.kulman.sk/tags/fody/</link>
    <description>Recent content in Fody on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.kulman.sk/tags/fody/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pock8: beautiful Pocket client for Windows Phone</title>
      <link>http://blog.kulman.sk/pock8-beautiful-pocket-client-for-windows-phone/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kulman.sk/pock8-beautiful-pocket-client-for-windows-phone/</guid>
      <description>&lt;p&gt;Recently I have released a new Windows Phone app called &lt;a href=&#34;http://t.co/YMtrM84rwI&#34;&gt;Pock8&lt;/a&gt;. Pock8 is a beautiful Pocket (formerly Read It Later) client for Windows Phone. The design of the app was created by Jan Marek who worked with my on the &lt;a href=&#34;http://windowsphone.com/s?appid=b2667b3c-9272-4416-b0be-c8adadc651e4&#34;&gt;Shopping List Simple&lt;/a&gt; app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.kulman.sk/images/pocket.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;

&lt;p&gt;Our goal was to create a Pocket client that would be really easy to use and that would have a nice and simple design. I think we have achieved our goal. The main features of the app are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clean and simple design&lt;/li&gt;
&lt;li&gt;optimized article view for comfortable reading&lt;/li&gt;
&lt;li&gt;article cache for offline reading&lt;/li&gt;
&lt;li&gt;dark theme for OLED screens or reading in the dark&lt;/li&gt;
&lt;li&gt;support for receiving articles from other apps like WPCentral&lt;/li&gt;
&lt;li&gt;listening to articles aloud&lt;/li&gt;
&lt;li&gt;sharing articles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In version 1.2 we really concentrated on user feedback and added many features that our users requested. We love and users and want to make them happy.&lt;/p&gt;

&lt;p&gt;The app is free to use with one limitation, all the list display just 5 articles at any time. You can use an in-app purchase to get rid of the limitation and support further development of the app.&lt;/p&gt;

&lt;p&gt;For more info about &lt;a href=&#34;http://t.co/YMtrM84rwI&#34;&gt;Pock8&lt;/a&gt;, follow the app on Twitter at &lt;a href=&#34;https://twitter.com/pock8app&#34;&gt;@pock8app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://qrcode.kaywa.com/img.php?s=6&amp;#038;d=http%3A%2F%2Fwindowsphone.com%2Fs%3Fappid%3Dc00715a7-d2d4-48c1-94e2-2ecc7c1b798b&#34; alt=&#34;Pock8&#34; style=&#34;max-width:100px&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing Windows Store apps with Caliburn Micro Part 4: services and dependency injection</title>
      <link>http://blog.kulman.sk/developing-windows-store-apps-with-caliburn-micro-part-4-services-and-dependency-injection/</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kulman.sk/developing-windows-store-apps-with-caliburn-micro-part-4-services-and-dependency-injection/</guid>
      <description>&lt;p&gt;In this installment of the series I will show you how user data services. We will finally use the Unity DI container that is part of the project setup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data and Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In next installment we will be showing a list of products, so let&amp;#8217;s create a simple Product class first in the Data directory:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6606102.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;PropertyChangedBase is a base class implementing the INotifyPropertyChanged interface and the ImplementPropertyChanged attribute makes sure it&amp;#8217;s method is called for all the property changes. (More about Fody &lt;a href=&#34;http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/&#34; title=&#34;INotifyPropertyChanged the easy way in Windows Phone and Windows 8&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;All the operations will be handled by a service implementing the IProductService interface:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6606127.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You can implement this interface any way you want. To keep things simple I chose an implementation with two hardcoded products:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6606170.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registering services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All our services need to be registered with the Unity DI container before being used. The place to do it is the App class (App.xaml.cs file). You can override the Configure method to do it:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6607482.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This registers the ProductService class to the IProductService interface. The new ContainerControlledLifetimeManager() parameter is Unity&amp;#8217;s way of setting the registration to be a singleton.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Injecting services into ViewModel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Injecting the ProductService into our MainViewModel is very simple. Just declare a IProductService variable and initialize it from constructor. Unity will take care of the rest:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6607538.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Next time we will implement a typical master-detail scenario showing products usign the ProductService whe have created. All the code is again &lt;a href=&#34;https://github.com/igorkulman/CaliburnDemoWinRT&#34;&gt;available at GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing Windows Store apps with Caliburn Micro Part 1: setup and first view</title>
      <link>http://blog.kulman.sk/developing-windows-store-apps-with-caliburn-micro-part-1-setup-and-first-view/</link>
      <pubDate>Tue, 30 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kulman.sk/developing-windows-store-apps-with-caliburn-micro-part-1-setup-and-first-view/</guid>
      <description>&lt;p&gt;I have been developing Windows Store apps for some time. I have always used MVVM, but mostly &amp;#8220;my own&amp;#8221; MVVM. I have finally decided to use a &amp;#8220;real&amp;#8221; MVVM framework and I have chosen Caliburn Micro, because I did not like MVVM very much. In this article I am going to show you how to use Caliburn Micro, Unity and Fody to develop Windows Store apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caliburn Micro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://caliburnmicro.codeplex.com/&#34;&gt;Caliburn Micro&lt;/a&gt; is a small, yet powerful framework, designed for building applications across all Xaml Platforms. With strong support for MVVM and other proven UI patterns, Caliburn.Micro will enable you to build your solution quickly, without the need to sacrifice code quality or testability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I started with Calibun Micro I discovered an &lt;a href=&#34;http://nybbles.blogspot.cz/2013/02/winrt-caliburnmicro-and-ioc-part-3.html&#34;&gt;article by Thomas Baker about using Unity as DI container with Caliburn Micro&lt;/a&gt;. His article also contains code that makes it easy for you to save and load state when the app gets suspended. With his permission, I have &lt;a href=&#34;https://nuget.org/packages/Caliburn.Micro.Unity.WinRT/&#34;&gt;created a Nuget package&lt;/a&gt; from his code, this article is going to use this package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fody&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have been using &lt;a href=&#34;https://github.com/Fody/Fody&#34;&gt;Fody&lt;/a&gt; with Windows Phone and Windows Store apps for some time now. I especially use the &lt;a href=&#34;https://github.com/Fody/PropertyChanged&#34;&gt;INotifyPropertyChanged weaver&lt;/a&gt; I &lt;a href=&#34;http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/&#34; title=&#34;INotifyPropertyChanged the easy way in Windows Phone and Windows 8&#34;&gt;wrote about earlier&lt;/a&gt;. Check the article for more information if you are not already familliar with Fody.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s start buidling a simple demo application. This demo application will show you how little code you need to write to get something done when using the mentioned libraries.&lt;/p&gt;

&lt;p&gt;Create a Blank App. Add the &lt;a href=&#34;http://www.nuget.org/packages/Caliburn.Micro.Unity.WinRT/&#34;&gt;Caliburn.Micro.Unity.WinRT&lt;/a&gt; package from Nuget. It will install all the dependencies you need. Install &lt;a href=&#34;http://www.nuget.org/packages/PropertyChanged.Fody/&#34;&gt;PropertyChanged.Fody&lt;/a&gt; from Nuget. Next you need to hook up PropertyChanged.Fody with Fody. Open FodyWeavers.xml and change it to&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6088620.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;PropertyChanged.Fody now knows that it should call the NotifyOfPropertyChange method from Caliburn Micro when a property gets changed. Let&amp;#8217;s do some cleanup next. Delete MainPage.xaml, rename the Common folder to Resources and create a few additional folders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Views&lt;/li&gt;
&lt;li&gt;ViewModels&lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Converters&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next make you app inherit from CaliburnUnityApplication by changing App.xaml to&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6088861.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and cleaning up and changing App.xaml.cs to&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6088871.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First ViewModel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you can create your first ViewModel and your first View. Caliburn Micro uses a naming convention to pair a ViewModel and a View. Create a new class called MainViewModel in the ViewModels folder. Make the class inherit from ViewModelBase and implement the default constructor:&lt;/p&gt;

&lt;p&gt;create a new string property called Title. Add the ImplementPropertyChanged attribute to the class. This makes NotifyPropertyChanged.Fody call the NotifyOfPropertyChange whenever any of the properties (just Title for now) changes. Assing some text to the Title property in the constructor:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6088988.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First View&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now create a view for the MainViewModel as a Blank Page. According to the naming conventions, it needs to be called MainView and created in the Views folder. Add a TextBlock to the View. To bind the text of this TextBlock to the Title property, you could use Text=&amp;#8221;{Binding Title}&amp;#8221;. This works just fine but you do not have to do it. Just name the TextBlock the same as the property you want it to bind to (in our case Title):&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6089012.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Navigating to the view&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is only one more thing left to do. You need to tell the framework to navigate to the MainView when the app starts. This is done in the OnLaunched method in App.xaml.cs&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/6089032.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run you app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hit F5 and you will see your app start, navigate to MainView and show the text from the Title property in this view.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&#34;https://github.com/igorkulman/CaliburnDemoWinRT&#34;&gt;code on Github&lt;/a&gt; and stay tuned for Part 2!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>INotifyPropertyChanged the easy way in Windows Phone and Windows 8</title>
      <link>http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kulman.sk/inotifypropertychanged-the-easy-way-in-windows-phone-and-windows-8/</guid>
      <description>&lt;p&gt;If you develop Windows Phone, Windows 8, Silverlight or WPF apps using the MVVM pattern, you are familiar with the INotifyPropertyChanged interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Typical implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a typical implementation, you usually have a base class implementing the interface, like&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849361.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;or use a framework like MVVMLight, Prism or Caliburn Micro that provides such base class for you. In your view models you have properties using the PropertyChanged method&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849364.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You do not need to create such properties by hand, you can &lt;a href=&#34;http://www.kulman.sk/data/down/propn.snippet&#34;&gt;use a snippet&lt;/a&gt;, but it is still a lot of code to do such a simple thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meet Fody&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Fody/Fody&#34;&gt;Fody&lt;/a&gt; is an assembly weaver for .NET that plugs to the build process of your project and modifies the IL of your assemblies according to your needs. It supports .net 3.5, .net 4, .net 4.5, Silverlight 4, Silverlight 5, Windows Phone 7, Windows Phone 8, Metro on Windows 8, Mono, MonoTouch, MonoDroid and PCL. No installation or configuration is required, you just need to install the &lt;a href=&#34;http://nuget.org/packages/Fody/&#34;&gt;Fody Nuget package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INotifyPropertyChanged using Fody (80% of the time)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fody has a &lt;a href=&#34;https://github.com/Fody/PropertyChanged&#34;&gt;PropertyChanged addin&lt;/a&gt; that does all the INotifyPropertyChanged plumbing for you. If you want the same behavior as in my typical implementation example, there is no need for a base class. Install the &lt;a href=&#34;https://github.com/Fody/PropertyChanged&#34;&gt;PropertyChanged.Fody Nuget package&lt;/a&gt;, decorate your view model class with the ImplementPropertyChanged attribute and use just basic properties&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849367.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;That is it. Less code, the same behaviour. You can verify it with tools like &lt;a href=&#34;http://www.telerik.com/justdecompile.aspx&#34;&gt;Telerik JustDecompile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The remaining 20%&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fody does all the plumbing for you. It even knows that the FullName property uses FirstName and Surname and raises the PropertyChanged event for it when any og the two properties changes. The PropertyChanged.Fody addin &lt;a href=&#34;https://github.com/Fody/PropertyChanged/wiki/Attributes&#34;&gt;contains attributes&lt;/a&gt;, that you can use to define dependencies&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849371.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;or to raise the PropertyChanged event for any other property&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849373.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you want to execute some additional code in the setter. Fody allows it, just create a method with the &lt;a href=&#34;https://github.com/Fody/PropertyChanged/wiki/On_PropertyName_Changed&#34;&gt;name On_PropertyName_Changed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/5849376.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;If you use a framework and you want to raise the PropertyChanged event through a method of this framework, it is not a problem. You just need to &lt;a href=&#34;https://github.com/Fody/PropertyChanged/wiki/Options&#34;&gt;set the EventInvokerNames options&lt;/a&gt;. The Fody &lt;a href=&#34;https://github.com/Fody/PropertyChanged/wiki/SupportedToolkits&#34;&gt;documentation even describes what to set for some of the frameworks&lt;/a&gt; so you do not have to figure it out for yourself.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>