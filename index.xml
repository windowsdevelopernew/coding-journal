<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Journal</title>
    <link>https://blog.kulman.sk/</link>
    <description>Recent content on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jun 2016 09:29:12 +0100</lastBuildDate>
    <atom:link href="https://blog.kulman.sk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a simple Windows 10 game with Win2D</title>
      <link>https://blog.kulman.sk/creating-a-simple-windows-10-game-with-win2d</link>
      <pubDate>Wed, 15 Jun 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/creating-a-simple-windows-10-game-with-win2d</guid>
      <description>&lt;p&gt;Some time ago while looking at some pixel art work I got an idea to create a retro pixel art game for Windows 10. The choice was obvious, &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban&lt;/a&gt;. I have a very special relationship with the Sokoban game. The Delpi version of Sokoban was the first game I ever created. I later ported it to all the platforms I played with, namely J2ME (for my Siemens S60 phone), Linux (using Kylix which was basically a Delphi for Linux), Windows Phone 7 and now &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban Pixel&lt;/a&gt; for the Universal Windows Platform.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/sokoban-gameplay.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;Win2D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I did not want to learn &lt;a href=&#34;https://unity3d.com/&#34;&gt;Unity&lt;/a&gt; and I considered it quite a overkill for such a simple game. &lt;a href=&#34;http://www.monogame.net/&#34;&gt;Monogame&lt;/a&gt; seemed like an obvious choice, because my Sokoban for Windows Phone 7 was written in XNA. But Monogame requires too much ceremony to install and set up so I was not very eager to use it. I found &lt;a href=&#34;https://github.com/Microsoft/Win2D&#34;&gt;Win2D&lt;/a&gt;. Win2D is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. It is available to C# and C++ developers writing Windows apps for Windows 8.1, Windows Phone 8.1 and Windows 10. It utilizes the power of Direct2D, and integrates seamlessly with XAML and CoreWindow. This means you can create a normal XAML application, create all your non-gameplay screens in XAML and use Win2D just for the actual gameplay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial setup and loading resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get started with Win2D just install the &lt;code&gt;Win2D.uwp&lt;/code&gt; Nuget package and add a &lt;code&gt;CanvasControl&lt;/code&gt; to your app. That&amp;rsquo;s it, no more setup required.&lt;/p&gt;

&lt;p&gt;Before drawing any resources you need to first load them. This should be done in the &lt;code&gt;CreateResources&lt;/code&gt; event of the &lt;code&gt;CanvasControl&lt;/code&gt;. This method should not be async so if you need to load your resources asynchronously (as you always do) you need to use a trick with a separate method&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/39f73f5117a02c94fbe3b85ec57bb8a8.js?file=load.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code snippet also shows how to load a simple image as a resources. You probably will not need to load anything other that images in a simple game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawing the game&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make the &lt;code&gt;CanvasControl&lt;/code&gt; draw your game you need to hook up the &lt;code&gt;Draw&lt;/code&gt; event and put all you rendering logic there. There are basically just two things you will want to render, text and images&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/39f73f5117a02c94fbe3b85ec57bb8a8.js?file=draw.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Both methods have many overloads so it is up to you to choose the one that suits you best. There are also other methods for drawing primitives like likes or circles, take a look at the &lt;a href=&#34;http://microsoft.github.io/Win2D/html/Introduction.htm&#34;&gt;documentation&lt;/a&gt;. When creating a pixel art game, make use you use the &lt;code&gt;CanvasImageInterpolation.NearestNeighbor&lt;/code&gt; otherwise your images will look blurred if not on sufficient resolution.&lt;/p&gt;

&lt;p&gt;Depending on the type of your game, you may need to refresh the game canvas periodically or just as a reaction to the user input. In both cases, just call &lt;code&gt;Invalidate()&lt;/code&gt; on your &lt;code&gt;CanvasControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handling user input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to make you game great on Windows 10, you need to handle a few different input methods because Windows 10 runs on a variety of different devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keyboard and controller&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First you should handle input from the keyboard, so the game is comfortably playable on a notebook or desktop PC. To do this, you can just subscribe to the &lt;code&gt;KeyUp&lt;/code&gt; method of the current page or to the global &lt;code&gt;Window.Current.CoreWindow.KeyUp&lt;/code&gt; event. Both events give you a &lt;code&gt;VirtualKey&lt;/code&gt; that the user pressed and you just decide what to do.&lt;/p&gt;

&lt;p&gt;If you want to make your game playable on the XBox One or on the PC with a XBox One controller, you should handle the controller input. Handling the controller input is the same as handling the keyboard, you just check for different keys. The resulting code may look like this.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/39f73f5117a02c94fbe3b85ec57bb8a8.js?file=input.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you want to make your game run on XBox One and do not have an XBox One to test it, just get the XBox One controller, connect it to your PC with an USB cable and make sure the whole game is controllable and playable just with it, without the keyboard or mouse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Touch devices&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Making your game playable on a phone or on a tablet is a bit tricky. There are no input devices usually attached, so you have to come up with your own. There are many ways to handle this. You can recognizes swipes on the device, or make the user tilt the device. But the solution I like the best is to render a simple d-pad in the right corner of the screen. This way the user can hold the device in both hands and use the right thumb to play the game.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/sokoban-dpad.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When building a simple 2D game for Windows 10, making it a UWP app and use Win2D. The Win2D framework is easy to work with and embed into UWP apps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating better forms in Windows Phone apps</title>
      <link>https://blog.kulman.sk/creating-better-forms-in-windows-phone-apps</link>
      <pubDate>Tue, 29 Mar 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/creating-better-forms-in-windows-phone-apps</guid>
      <description>&lt;p&gt;If you are a Windows Phone user you must know that filling in forms in apps is usually a real pain. There is no good way to move from one input to another or to collapse the keyboard. The whole process becomes a struggle, tapping outside the input fields to collapse the keyboard allowing you to scroll to the next input or to the submit button at the top of the screen, usually occluded by the keyboard.&lt;/p&gt;

&lt;p&gt;The typical struggle to get to the last input fields and the submit button may look like this&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/forms1.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;There is no guidance on how to approach this. Take a look at the Store app on Windows 10 mobile, the perfect example of bad UI and UX directly from Microsoft and try review an app. You fill in the title of the review, then struggle to go into the review text input, you have to tap somewhere above the input to hide the keyboard, but not to hit the stars control &amp;hellip; just an UX disaster.&lt;/p&gt;

&lt;p&gt;There is one simple thing you can do to make the experience much better for the user. When the keyboard appears on the screen, take the area of the screen than contains the input and add it a bottom margin corresponding to the height of the keyboard. This will make the whole screen longer and all the inputs and the submit button will be available while scrolling without the need to hide the keyboard.&lt;/p&gt;

&lt;p&gt;The whole experience becomes much better&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/forms2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementation is also simple.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/250de623e9213bc3bf90.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Using Tooltips to make better menus in Windows apps</title>
      <link>https://blog.kulman.sk/using-tooltips-to-make-better-menus-in-windows-apps</link>
      <pubDate>Wed, 23 Mar 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/using-tooltips-to-make-better-menus-in-windows-apps</guid>
      <description>&lt;p&gt;If you use Windows apps with navigation menus consisting of icons, you may have noticed that some of those apps show you a text when hovering above those icons. This is a nice touch for the users, allowing them to quickly grasp the meaning of the menu icons without the need to click them or to expand the menu (if available).&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/tooltips.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementing this kind of hovers is really easy thanks to the &lt;code&gt;ToolTipService&lt;/code&gt; that is available in Windows 8.1 and Windows 10 UWP. You can add &lt;code&gt;&amp;lt;ToolTipService.ToolTip&amp;gt;&lt;/code&gt; with any element and include basically any XAML content as the tooltip. Here is a sample from the animation using a simple localized &lt;code&gt;TextBlock&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/c7320d81f9b882bcfd69.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Choosing an image from gallery or camera a bit better in Universal Windows apps</title>
      <link>https://blog.kulman.sk/choosing-an-image-from-gallery-or-camera-in-uwp</link>
      <pubDate>Mon, 14 Mar 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/choosing-an-image-from-gallery-or-camera-in-uwp</guid>
      <description>&lt;p&gt;When developing Windows Phone apps you may encounter a use case when you have to allow the user to either pick a photo from the photos gallery in the photo or a take a new photo using the phone&amp;rsquo;s camera. One example of this may be the registration process when the user may choose a profile picture.&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1, this task is quite simple, just use the &lt;code&gt;FileOpenPicker&lt;/code&gt;. It allows you to pick a photo from the gallery or take a new photo. Just take a look at this animation showing how the users takes a new photo using the phone&amp;rsquo;s camera.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/wpa81.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;The code for this is relatively simple, although the &lt;code&gt;AndContinue&lt;/code&gt; pattern can be a pain&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-wpa81.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In Windows 10 Mobile, the &lt;code&gt;FileOpenPicker&lt;/code&gt; has been changed to be more customizable. This make the process of  taking a new photo using the phone&amp;rsquo;s camera totally hidden. Not a chance a common user will discover it, just take a look at this animation.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/uwp.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;So how to make this experience a bit better for the user? My solution is instead of launching the &lt;code&gt;FileOpenPicker&lt;/code&gt; showing a &lt;code&gt;Flyout&lt;/code&gt; with two options; Choose from gallery and Take photo. The Choose from gallery option just launches the &lt;code&gt;FileOpenPicker&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-uwp.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and the Take photo option uses CameraCaptureUI to directly take a photo&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=camera-uwp.cs&#34;&gt;&lt;/script&gt;       

&lt;p&gt;The result might look like this. Do not forget to add an option to delete the photo if one is already chosen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/uwp2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Hockey App to distribute Windows Phone apps</title>
      <link>https://blog.kulman.sk/using-hockey-app-to-distribute-windows-phone-apps</link>
      <pubDate>Tue, 16 Feb 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/using-hockey-app-to-distribute-windows-phone-apps</guid>
      <description>&lt;p&gt;Distributing Windows Phone apps to testers has always been a pain. The Private Beta in the Windows Store intended for this is not very flexible and it got much worse with Windows 10 (generating promotional code that can take up to 24 hours).&lt;/p&gt;

&lt;p&gt;One of the better ways to solve the beta build distribution is using a service like &lt;a href=&#34;http://hockeyapp.net/&#34;&gt;Hockey App&lt;/a&gt;, that Microsoft recently acquired. To be able to use Hockey App (or any other service) you need to &lt;a href=&#34;https://products.websecurity.symantec.com/orders/enrollment/microsoftCert.do&#34;&gt;buy a $299 certificate from Symantec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You then use the certificate to sign the XAP or APPX files of your app. Those signed binaries can be than installed on devices with the correct application enrollment token directly from Hockey App, bypassing the Windows Store.&lt;/p&gt;

&lt;p&gt;One of my clients got persuaded to try this approach after some problem with the Windows Store Private Beta and bough the certificate. It took a week for the purchase to go through and another week to finally get the certificate in the correct PFX format from Symantec.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding password to the PFX certificate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The PFX certificate file I got had an empty password. This is quite a problem for all the Microsoft tools that work with certificates, especially for XapSignTool. I could not make the tools work with an empty password so I had to change the password first. This is done quite easily using using OpenSSL.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/24cb76710fc7d6c9f2cb.js?file=pwd.bat&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Generating application enrollment token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To allow the devices to install the signed XAP (or APPX) you need to generate an application enrollment token that will be installed on the devices. The process is quite simple, just call&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/24cb76710fc7d6c9f2cb.js?file=aet.bat&#34;&gt;&lt;/script&gt;

&lt;p&gt;as a result you will get three files: AET.aet, AET.aetx, AET.xml. Get the AET.aetx file and upload it to Hockey App by clicking Add version and drag and dropping the file to the upload dialog. The company profile for your app in Hockey App will get updated using this file. This is done only once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signing the binary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each time you submit a new build to Hockey App, you need to sign the binary (XAP in my case) with the certificate. The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/dn168929(v=vs.105).aspx&#34;&gt;signing process differs for XAP and APPX files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For XAP files it is just calling the right PowerShell script with the correct parameters&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/24cb76710fc7d6c9f2cb.js?file=sign.bat&#34;&gt;&lt;/script&gt;

&lt;p&gt;and the result is .. an error &lt;code&gt;Signtool Error: This file format cannot be signed because it is not recognized&lt;/code&gt;. So I had to do some research. I found a &lt;a href=&#34;https://stackoverflow.com/questions/20970686/error-signing-windows-phone-xap-file-signtool-error-this-file-format-cannot&#34;&gt;developer describing the same problem on StackOverflow&lt;/a&gt;. The solution was to install &lt;a href=&#34;http://downloads.tomsguide.com/silverlight-microsoft,0301-10659.html&#34;&gt;Silverlight 5.1.30514.0&lt;/a&gt;. This was really strange, it is a Silverlight runtime not an SDK and it does not get installed with Visual Studio or the Windows Phone SDK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributing the app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you upload a signed binary to Hockey App, your testers can download it using a web browser to their devices. Each device needs to install the company profile (the application enrollment token) once, and then can install the builds you provide.&lt;/p&gt;

&lt;p&gt;Installation of the Windows Phone app builds is a bit strange, no install progress or success messages, the app just appears in the list ofter one or two minutes. But it works, and it is much faster and more flexible than the Private Beta provides by the Windows Store.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to handle localization strings provided by the client in a Windows Phone app</title>
      <link>https://blog.kulman.sk/how-to-handle-localization-strings-provided-by-client</link>
      <pubDate>Tue, 09 Feb 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/how-to-handle-localization-strings-provided-by-client</guid>
      <description>&lt;p&gt;I currently work on a Windows Phone 8.1 app for a client with an interesting approach to app localization. They have a Google Docs sheet with all the localization string for the app in all the supported languages and a tool that converts this localization strings in to per-language versioned JSON files. The generated JSON files are kept in a git repository. The Android, iOS and now my Windows Phone app should have the git repository added as a submodule. When a new version of the JSON files with the localization appear in the submodule, the app should use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deciding the localization approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the old days of Windows Phone 7 and Windows Phone 8 I would simply write an utility that reads the newest version of the JSON localization files and generate a RESX file for each language. RESX is XML format that is simple to generate. If you had a localized string with a key say Game, you would put it everywhere when the localization of the word game was needed. Simple&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1 (and 10) you should use RESW files for localization. This is the new x:Uid approach that, in my honest opinion, really sucks. It forces you to duplicate string if you use I string in multiple places, there is no design time support, you never know what UI element are localized and what you forgot to localize. Simply put, it is a mess. This approach is not usable at all with the string client provides.&lt;/p&gt;

&lt;p&gt;There is no way to make any script generate a RESW file with duplicated string matching the multiple usages of each string. If you have a localized string with a key Game and 2 TextBlocks and 1 Buttons that use it, you need to put it into the RESW file 3 times, once for each UI element. SO instead of a Game key, you would have a GameTextBlock.Text key, an AnotherGameTextBlock.Text and a GameButton.Content key, all with the same value and applied in design time. Madness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using RESX files on Windows Phone 8.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One approach to solve this problem is to use the good old RESX files with your Windows Phone 8.1 project. Typically by creating a Portable Class Library (PCL) with the RESX files, doing a bit of configuration for the supported languages and linking this PCL project to your Windows Phone 8.1 project. You can find a few articles about this approach online and also a few gotchas and their solutions. It sounds like a good idea at first, but it is too problematic for my tastes.&lt;/p&gt;

&lt;p&gt;I tried this approach but ended frustrated with too many problems too solve, like Visual Studio hanging when deploying to a device when using RESX files. So I decided to go with a custom solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating Windows Phone 8-like localization strings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally I decided to generate a class that would look and behave similar to the old Windows Phone 8-like localization strings class. The idea is quite simple, no need to a PCL or any RESX files.&lt;/p&gt;

&lt;p&gt;The first step is to create a directory and empty RESW files for each supported language in the Windows Phone 8.1 project&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/languages.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Then write a script that generates all the RESW files from the newest JSON localization files&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=localization-converter-1.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now with the RESW files populated with all the localization string it is time to put them to use. First I created a &lt;code&gt;LocalizedStrings&lt;/code&gt; class very similar to the one in Windows Phone 8:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=LocalizedStrings.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and added it to &lt;code&gt;App.xaml&lt;/code&gt; as a dictionary resources called &lt;code&gt;S&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=App.xaml&#34;&gt;&lt;/script&gt;

&lt;p&gt;The interesting ans still missing part is the &lt;code&gt;AppResources&lt;/code&gt; class referenced in &lt;code&gt;LocalizedStrings&lt;/code&gt;. It is a partial class, consisting of &lt;code&gt;ResourceLoader&lt;/code&gt; instance to get the string at runtime and a Singleton to get the string from C# code&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=AppResources.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The second part of this class is generated by the same script that generates the RESW files. For each key in the localization string, it generates a property like this in the &lt;code&gt;AppResources&lt;/code&gt; class&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=AppResources.strings.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code to generate this is part of the script&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=localization-converter-2.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;The result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you put all this pieces together, you have a RESW files with all the localization strings and a localization class that can be generated on demand. I run the script and generate the files every time there is an update in the git submodule with the JSON localization files.&lt;/p&gt;

&lt;p&gt;When I want to use any of these localization string in XAML, I simply use it like this&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=xaml-usage.xaml&#34;&gt;&lt;/script&gt;

&lt;p&gt;Using a binding allows me to use to use the same localization keys for many elements and I do not have to duplicate the keys like in the x:Uid scenario.&lt;/p&gt;

&lt;p&gt;If I need to used a localization string in C#, I have a strongly typed access to it&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/53a29b6e2143cac1ec8a.js?file=csharp-usage.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;instead of creating a &lt;code&gt;ResourceLoader&lt;/code&gt; instance and calling &lt;code&gt;GetString&lt;/code&gt; with a string parameter.&lt;/p&gt;

&lt;p&gt;Another approach would be having a public property with the &lt;code&gt;AppResources&lt;/code&gt; instance in a &lt;code&gt;ViewModel&lt;/code&gt; base class, it would make the binding shorter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A week with Microsoft Band 2</title>
      <link>https://blog.kulman.sk/a-week-with-microsoft-band-2</link>
      <pubDate>Mon, 21 Dec 2015 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/a-week-with-microsoft-band-2</guid>
      <description>&lt;p&gt;About a week ago I got a Microsoft Band 2. I really wanted to try out the device, because this second generation does not look as bad as the first one, there are new sensors added and generally it should be a visible improvement over the original Band. I have been an iPhone users for about two years now (approximately the time since last good Windows Phone device was released), currently using iPhone 6s so I was also curious to know how well the Band 2 works with iOS. This blog post sums up my impressions after a week of using the Microsoft Band 2 with my iPhone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expectations and habits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First I have to state that I am not a notifications junkie. I do not like being interrupted all the time. On my phone, only phone calls and SMS ale allowed to notify me with a sound and stay in the notifications center. Other few selected apps like Outlook, Twitter, Messenger, Sunrise are allowed to use iOS badges on my phone, just to let me know that there is a Twitter message or something I may be interested in. Other than that, no notifications for me. I guess I am not a typical user when it comes to notifications.&lt;/p&gt;

&lt;p&gt;As you may have already guessed, I was interested in the Microsoft Band 2 primarily as a health device, not as a smartwatch or distractions device. My expectation and goal is to move and exercise more and sleep better, not to immediately know about every new Facebook post (I do not even have the Facebook app installed).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look and feel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I always thought the first Microsoft Band was big, bulky and did not look very good. The Band 2 is nicer, the area around the display is not as bulky, the main mass of the device was moved to the other side. This makes you wear the device with the display inside your wrist, &amp;ldquo;military style&amp;rdquo;, the opposite of how you usually wear a watch. Event the guy in a video ad I saw wore it this way.&lt;/p&gt;

&lt;p&gt;Wearing the band on the inside allows a nice feature, turning the watch face on when you flip your wrist. This can save you precious battery compared to having the watch faces always visible, until you realize you turn your wrist a lot during the day, for example while eating. The band is made of rubber and it scratches quite easily. The scratches are visible when you look at the band from up close.&lt;/p&gt;

&lt;p&gt;The device feels solid, I did not feel uncomfortable wearing. I though using the keyboard while wearing it maybe be a problem and it partially was. I could use the keyboard while using my desktop computer, but I had to be careful not to scratch the display on the edge when using my Thinkpad notebook. Using the Thinkpad while wearing the Band was not really comfortable, I had to position my hands differently that I am used to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After I installed the Microsoft Health app for iOS on my phone, the pairing was quick without any problems. The app installed a firmware updated to the Band 2 while pairing. The next day the Microsoft Health app was updated and it updated the firmware in the Band 2 again. This time  the firmware update brought two new functions: controlling the music playback and inactivity reminder. I do not much care about the music controls, I can pause my podcasts using the button on my headphones. Inactivity reminder is a great feature, reminding you to wake up and take a few steps when sitting idle for a long time. I really do not know why this function was not in the Band from the beginning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/BandSetup.png&#34; class=&#34;pure-img-width&#34;&gt;
&lt;img src=&#34;https://blog.kulman.sk/images/BandUI2.png&#34; class=&#34;pure-img-width&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microsoft Health and Health Dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microsoft Health is the app you use to configure and manage your Band. It has a &amp;ldquo;windowsy&amp;rdquo; look and feel event on iOS (including messed up margins on some screens). It can import data from the iOS Health app, so it can show you number of steps that the iPhone records. But it cannot export the data back to iOS Health. This means that data like the data about your sleep can be accessed only from the Microsoft Health app and are not propagated to other iOS app that can import data from iOS Health.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/BandDashboard1.png&#34; class=&#34;pure-img&#34;&gt;&lt;/p&gt;

&lt;p&gt;You can connect the Microsoft Health app to the Microsoft Health Vault, which has a nice web dashboard. This dashboard is more detailed and more simple to use that the app in the phone. But you have to be ok with your data being exported to some Microsoft data center. If you choose to use the Health Vault you can compare your data to groups of other people. I do not know about any other platforms that allows you to do this. And it is always nice to compare your data to people of similar age, height and weight and see that you condition is not as bad as you may have thought.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/BandDashboard2.png&#34; class=&#34;pure-img&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apps and Web Tiles&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are not many 3rd party iOS apps, except big fitness apps like Strava, that can use the Band, but this is not a surprise. Band apps are maybe the only platform where Windows Phone has an advantage. Also there are not so many Web Tiles available, except for a couple of sports tiles made by the Bing team.&lt;/p&gt;

&lt;p&gt;So I decided to write &lt;a href=&#34;mshealth-webtile://?action=download-manifest&amp;amp;url=https://dl.dropboxusercontent.com/u/73642/kinoklub.webtile&#34;&gt;my own tile, showing the schedule of three Czech cinemas&lt;/a&gt;. The documentation for the Web Tiles is short and concise, the samples are ok, but there is no way to test your tiles other than deploying them to the real device. No data validity checker, no emulator and no good error messages. If you make a mistake, any mistake, be it an icon with wrong dimensions or invalid JSON manifest, the Microsoft Health app just gives you a generic error when trying to deploy the app to the Band.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps and Sleep tracking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Band counts your steps, distance traveled, floors climbed and checks your heart rate while at it. If you go for a run you can enable GPS and track your route.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/BandSteps.png&#34; class=&#34;pure-img-width&#34;&gt;
&lt;img src=&#34;https://blog.kulman.sk/images/BandGPS.png&#34; class=&#34;pure-img-width&#34;&gt;&lt;/p&gt;

&lt;p&gt;I could not have the Band on me while going to my Wing Chun practice. It would get destroyed. No similar devices are meant to be used when doing martial arts. It is a shame, I would be really interested to see my heart rate history doing the practice.&lt;/p&gt;

&lt;p&gt;The best feature for me was the already mentioned inactivity timer. I left it on the default setting, reminding me to wake up and take some steps after an hour of sitting at the computer.&lt;/p&gt;

&lt;p&gt;Sleep tracking is the feature I was looking forward to the most. The Band track the time it takes you to fall asleep, the length and quality of your sleep (deep and light sleep cycles), the number of times you wake up and your heart rate. It can function as an alarm, waking you up in the morning by vibrating on your wrist. The alarm can be set to a specific time or you can use the smart alarm feature. The smart alarm monitors your sleep cycle and always wakes you up in a light sleep phase, up to 30 minutes before the time you set. For me it basically meant getting up 30 minutes earlier every day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/BandSleep1.png&#34; class=&#34;pure-img-width&#34;&gt;
&lt;img src=&#34;https://blog.kulman.sk/images/BandSleep2.png&#34; class=&#34;pure-img-width&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notifications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I set the Band to show me notifications for incoming calls and SMS, nothing more. When a notification is invoked, the Band vibrates. The default medium intensity is not very intense, so I had to set it to high to be aware of it. When you receive a SMS, the band can &amp;ldquo;read&amp;rdquo; it to you by showing it on the screen quickly, so you do not have to scroll.&lt;/p&gt;

&lt;p&gt;I did not bother to set up notifications for other apps. But the Microsoft Health app also offered me notifications for Calendar, Facebook, Facebook Messenger, Twitter and a generic one called Notifications Center.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/BandUI1.png&#34; class=&#34;pure-img-width&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Battery usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Microsoft Band 2 will stay charged for 2 days when not using the GPS. It is long as typical smartwatches, but if you are used to classical watches like I am, it is a very short time. It means another device to check status and charge. The Band will tell you to charge it long in advance. One day, I got a message to charge it at about 1 PM. By the time I got home after 6 PM the band battery indicator was red, but the Band was still working.&lt;/p&gt;

&lt;p&gt;The Band charges really slow, compared to a phone or basically any other device. It wants you to think the process is faster, adding a percentage points every minute but then it gets stuck at 99% for about 40 minutes. You will always need at least two hours to charge it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Annoyances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the notifications and all the data are take from the phone and not really configurable. There is one thing that got me really annoyed when I discovered it. The iOS calendar app creates a calendar of peoples&amp;rsquo; birthdays. I have this calendar turned of in the iOS Calendar app and also in Sunrise, my calendar app of choice. But the Band does not respect this settings and also there is not configuration possible. So your calendar gets littered with birthdays and possible birthday notifications and there is nothing that you can do about it. Except disabling the calendar functionality on the Band. I know, I contacted Microsoft support (half an hour with probably an Indian guy, no solution, just my heart rate rising - Band told me).&lt;/p&gt;

&lt;p&gt;Another annoyance is also related to notifications. If you turn on the Band, open a tile or go to some menu, turn off the Band, go on with your day and a notification approves, guess what happens? The Band vibrates, you turn it on and you are still in the last menu or tile and have no idea, what the notification was about.&lt;/p&gt;

&lt;p&gt;If you switch your phone to a do not disturb mode, the Band completely ignores it and still notifies you about event, although your phone does not. You have to Switch the Band to a do not disturb mode separately every time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The one problem with the Band I had was the broken UV sensor. I could not immediately exchange the Band for a new one because I live in a country where the Bands is not sold and supported. It looks like &lt;a href=&#34;https://answers.microsoft.com/en-us/band/forum/msband-band_hardware/microsoft-band-uv-sensor-does-not-seem-to-work/97a7c92c-f135-48cd-8945-3781434d309c&#34;&gt;broken UV sensor is a common problem on both Band and Band 2&lt;/a&gt;. If you can buy it in a Microsoft Store (I was not), try if the UV sensor works, it may not.&lt;/p&gt;

&lt;p&gt;I called my local Microsoft technical support and the operator did not even know what Microsoft Band 2 was! After a while, maybe binging the name, she told me to get lost because they do not support it. Nice customer service as always, Microsoft Czech Republic. So I tried the UK support web page. I tried for three days and I always got the same response, telling me that they are busy chatting with someone else and that I can give them a UK phone number and they will call me back. Of course I do nod have a UK phone number. My next step will be contacting the US support after  see how that goes &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Microsoft Band 2 is a great health device. If you expectation are similar than mine than by all means get one. If you live in the US, go buy it to a Microsoft Store and test if everything works as supposed to. It may not. If you live outside the US, be aware that you may be on your own when something goes wrong. If you want a smartwatch or a device to keep track of notification, the Band is not for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I finally manage to chat with the UK support. I got a UPS label and sent the Band to Germany for repairs. After 6 work days I got a new Band.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobilize.net: Converting Windows Phone 8 apps to UWP? Not really</title>
      <link>https://blog.kulman.sk/mobilize-net-converting-windows-phone-apps-to-uwp</link>
      <pubDate>Fri, 18 Dec 2015 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/mobilize-net-converting-windows-phone-apps-to-uwp</guid>
      <description>&lt;p&gt;When Microsoft announced the Windows 10 developer platform, they also announced bridges to make porting apps from Android, iOS and Web easier. Those bridges are now either dead (Android) or unusable (iOS) but there is another tool that can be considered a bridge left. It is called &lt;a href=&#34;http://www.mobilize.net/download-silverlight-bridge&#34;&gt;Mobilize.net Silverlight&lt;/a&gt; Bridge and it is not from Microsoft. It promises converting existing Windows Phone 8 (Silverlight apps) to the Universal Windows Platform. Considering the majority of apps in the Windows Phone Store are Windows Phone 8 apps and the fact that Android and iOS developers do not really care about Windows, Mobilize.net seem to be the most useful of the bridges, because there is no easy porting apps from Windows Phone 8 to UWP, just rewriting. So I tried it out.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/Windows10-Devices.png?t=1449725816496&amp;amp;width=425&amp;amp;height=210&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Mobilize.net is currently in technical preview. After you download and install it, it integrates into Visual Studio 2015 and there is a new context menu for Windows Phone 8 project, allowing you to convert them to UWP apps. If you use it, you get a dialog windows and a conversion process that will fail most of the times with a strange error. At least for me it did.&lt;/p&gt;

&lt;p&gt;I got in touch with their support and I found out the reason for the conversion always failing. They do not support C# 6 all and mine, and probably all yours, project use C# 6. If you look at the error logs a bit closer, you will see error messages about failed tokenization. This is really strange, it looks like they are parsing the source code as text, instead of just using Roslyn. I do not get why, but they probably have a reason for this.&lt;/p&gt;

&lt;p&gt;If you go through all the trouble and remove all the C# 6 features from your project, the conversion will succeed. You will get a UWP project, that will most likely not compile. There are two main reasons for this.&lt;/p&gt;

&lt;p&gt;Mobilize.net changes your XAML to fix namespaces and replace controls that changed since Windows Phone 8, but it does not fix XAML features that were not available in UWP. And there are quite a few of them, from StringFormat in bindings to OpacityMask on images. You will have to fix your XAML manually and while you are at this, you will also have to rewrite your XAML to accommodate for the fact that there is not just one fixed resolution like it was in Windows Phone 8. Your XAML has to be responsive now. Mobilize.net did not really help here.&lt;/p&gt;

&lt;p&gt;The seconds problem are third party libraries. There are &lt;a href=&#34;https://github.com/MobilizeNet/UWPConversionMappings&#34;&gt;some mappings available for popular third party libraries&lt;/a&gt;. This mapping do two things. First they make sure the UWP project uses the correct Nuget packages and then they map namespaces, both in XAML and C#, that changed when the third party library transitioned from Windows Phone 8 to UWP. Chances are that there are no UWP versions of some or even the majority of the third party libraries you use. Probably because the functionality is nor longer available all the API has completely changed.&lt;/p&gt;

&lt;p&gt;I reached out to the Mobilize.net support asking about these two things, but I never got an answer.&lt;/p&gt;

&lt;p&gt;In conclusion, if your app is not trivial, you use C# 6, third party libraries and all the available XAML features, your experience will not be very good. If you app is well written (MVVM, abstractions) your are better with creating a new UWP project, pasting your code and rewriting your XAML. If your app is more trivial, Mobilize.net will probably work well for you. But in this case, rewriting your app to UWP without it would be probably takes the same amount of time.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>