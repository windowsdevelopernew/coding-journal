<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Store on Coding Journal</title>
    <link>https://blog.kulman.sk/categories/windows-store/</link>
    <description>Recent content in Windows Store on Coding Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jun 2016 09:29:12 +0100</lastBuildDate>
    <atom:link href="https://blog.kulman.sk/categories/windows-store/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a simple Windows 10 game with Win2D</title>
      <link>https://blog.kulman.sk/creating-a-simple-windows-10-game-with-win2d</link>
      <pubDate>Wed, 15 Jun 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/creating-a-simple-windows-10-game-with-win2d</guid>
      <description>&lt;p&gt;Some time ago while looking at some pixel art work I got an idea to create a retro pixel art game for Windows 10. The choice was obvious, &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban&lt;/a&gt;. I have a very special relationship with the Sokoban game. The Delpi version of Sokoban was the first game I ever created. I later ported it to all the platforms I played with, namely J2ME (for my Siemens S60 phone), Linux (using Kylix which was basically a Delphi for Linux), Windows Phone 7 and now &lt;a href=&#34;https://www.microsoft.com/store/apps/9nblggh4xdln&#34;&gt;Sokoban Pixel&lt;/a&gt; for the Universal Windows Platform.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/sokoban-gameplay.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;Win2D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I did not want to learn &lt;a href=&#34;https://unity3d.com/&#34;&gt;Unity&lt;/a&gt; and I considered it quite a overkill for such a simple game. &lt;a href=&#34;http://www.monogame.net/&#34;&gt;Monogame&lt;/a&gt; seemed like an obvious choice, because my Sokoban for Windows Phone 7 was written in XNA. But Monogame requires too much ceremony to install and set up so I was not very eager to use it. I found &lt;a href=&#34;https://github.com/Microsoft/Win2D&#34;&gt;Win2D&lt;/a&gt;. Win2D is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. It is available to C# and C++ developers writing Windows apps for Windows 8.1, Windows Phone 8.1 and Windows 10. It utilizes the power of Direct2D, and integrates seamlessly with XAML and CoreWindow. This means you can create a normal XAML application, create all your non-gameplay screens in XAML and use Win2D just for the actual gameplay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial setup and loading resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get started with Win2D just install the &lt;code&gt;Win2D.uwp&lt;/code&gt; Nuget package and add a &lt;code&gt;CanvasControl&lt;/code&gt; to your app. That&amp;rsquo;s it, no more setup required.&lt;/p&gt;

&lt;p&gt;Before drawing any resources you need to first load them. This should be done in the &lt;code&gt;CreateResources&lt;/code&gt; event of the &lt;code&gt;CanvasControl&lt;/code&gt;. This method should not be async so if you need to load your resources asynchronously (as you always do) you need to use a trick with a separate method&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/39f73f5117a02c94fbe3b85ec57bb8a8.js?file=load.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code snippet also shows how to load a simple image as a resources. You probably will not need to load anything other that images in a simple game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawing the game&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make the &lt;code&gt;CanvasControl&lt;/code&gt; draw your game you need to hook up the &lt;code&gt;Draw&lt;/code&gt; event and put all you rendering logic there. There are basically just two things you will want to render, text and images&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/39f73f5117a02c94fbe3b85ec57bb8a8.js?file=draw.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;Both methods have many overloads so it is up to you to choose the one that suits you best. There are also other methods for drawing primitives like likes or circles, take a look at the &lt;a href=&#34;http://microsoft.github.io/Win2D/html/Introduction.htm&#34;&gt;documentation&lt;/a&gt;. When creating a pixel art game, make use you use the &lt;code&gt;CanvasImageInterpolation.NearestNeighbor&lt;/code&gt; otherwise your images will look blurred if not on sufficient resolution.&lt;/p&gt;

&lt;p&gt;Depending on the type of your game, you may need to refresh the game canvas periodically or just as a reaction to the user input. In both cases, just call &lt;code&gt;Invalidate()&lt;/code&gt; on your &lt;code&gt;CanvasControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handling user input&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to make you game great on Windows 10, you need to handle a few different input methods because Windows 10 runs on a variety of different devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keyboard and controller&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First you should handle input from the keyboard, so the game is comfortably playable on a notebook or desktop PC. To do this, you can just subscribe to the &lt;code&gt;KeyUp&lt;/code&gt; method of the current page or to the global &lt;code&gt;Window.Current.CoreWindow.KeyUp&lt;/code&gt; event. Both events give you a &lt;code&gt;VirtualKey&lt;/code&gt; that the user pressed and you just decide what to do.&lt;/p&gt;

&lt;p&gt;If you want to make your game playable on the XBox One or on the PC with a XBox One controller, you should handle the controller input. Handling the controller input is the same as handling the keyboard, you just check for different keys. The resulting code may look like this.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/39f73f5117a02c94fbe3b85ec57bb8a8.js?file=input.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you want to make your game run on XBox One and do not have an XBox One to test it, just get the XBox One controller, connect it to your PC with an USB cable and make sure the whole game is controllable and playable just with it, without the keyboard or mouse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Touch devices&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Making your game playable on a phone or on a tablet is a bit tricky. There are no input devices usually attached, so you have to come up with your own. There are many ways to handle this. You can recognizes swipes on the device, or make the user tilt the device. But the solution I like the best is to render a simple d-pad in the right corner of the screen. This way the user can hold the device in both hands and use the right thumb to play the game.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/sokoban-dpad.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When building a simple 2D game for Windows 10, making it a UWP app and use Win2D. The Win2D framework is easy to work with and embed into UWP apps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating better forms in Windows Phone apps</title>
      <link>https://blog.kulman.sk/creating-better-forms-in-windows-phone-apps</link>
      <pubDate>Tue, 29 Mar 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/creating-better-forms-in-windows-phone-apps</guid>
      <description>&lt;p&gt;If you are a Windows Phone user you must know that filling in forms in apps is usually a real pain. There is no good way to move from one input to another or to collapse the keyboard. The whole process becomes a struggle, tapping outside the input fields to collapse the keyboard allowing you to scroll to the next input or to the submit button at the top of the screen, usually occluded by the keyboard.&lt;/p&gt;

&lt;p&gt;The typical struggle to get to the last input fields and the submit button may look like this&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/forms1.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;There is no guidance on how to approach this. Take a look at the Store app on Windows 10 mobile, the perfect example of bad UI and UX directly from Microsoft and try review an app. You fill in the title of the review, then struggle to go into the review text input, you have to tap somewhere above the input to hide the keyboard, but not to hit the stars control &amp;hellip; just an UX disaster.&lt;/p&gt;

&lt;p&gt;There is one simple thing you can do to make the experience much better for the user. When the keyboard appears on the screen, take the area of the screen than contains the input and add it a bottom margin corresponding to the height of the keyboard. This will make the whole screen longer and all the inputs and the submit button will be available while scrolling without the need to hide the keyboard.&lt;/p&gt;

&lt;p&gt;The whole experience becomes much better&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/forms2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementation is also simple.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/250de623e9213bc3bf90.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Using Tooltips to make better menus in Windows apps</title>
      <link>https://blog.kulman.sk/using-tooltips-to-make-better-menus-in-windows-apps</link>
      <pubDate>Wed, 23 Mar 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/using-tooltips-to-make-better-menus-in-windows-apps</guid>
      <description>&lt;p&gt;If you use Windows apps with navigation menus consisting of icons, you may have noticed that some of those apps show you a text when hovering above those icons. This is a nice touch for the users, allowing them to quickly grasp the meaning of the menu icons without the need to click them or to expand the menu (if available).&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/tooltips.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;Implementing this kind of hovers is really easy thanks to the &lt;code&gt;ToolTipService&lt;/code&gt; that is available in Windows 8.1 and Windows 10 UWP. You can add &lt;code&gt;&amp;lt;ToolTipService.ToolTip&amp;gt;&lt;/code&gt; with any element and include basically any XAML content as the tooltip. Here is a sample from the animation using a simple localized &lt;code&gt;TextBlock&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/c7320d81f9b882bcfd69.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Choosing an image from gallery or camera a bit better in Universal Windows apps</title>
      <link>https://blog.kulman.sk/choosing-an-image-from-gallery-or-camera-in-uwp</link>
      <pubDate>Mon, 14 Mar 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/choosing-an-image-from-gallery-or-camera-in-uwp</guid>
      <description>&lt;p&gt;When developing Windows Phone apps you may encounter a use case when you have to allow the user to either pick a photo from the photos gallery in the photo or a take a new photo using the phone&amp;rsquo;s camera. One example of this may be the registration process when the user may choose a profile picture.&lt;/p&gt;

&lt;p&gt;In Windows Phone 8.1, this task is quite simple, just use the &lt;code&gt;FileOpenPicker&lt;/code&gt;. It allows you to pick a photo from the gallery or take a new photo. Just take a look at this animation showing how the users takes a new photo using the phone&amp;rsquo;s camera.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/wpa81.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;The code for this is relatively simple, although the &lt;code&gt;AndContinue&lt;/code&gt; pattern can be a pain&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-wpa81.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;In Windows 10 Mobile, the &lt;code&gt;FileOpenPicker&lt;/code&gt; has been changed to be more customizable. This make the process of  taking a new photo using the phone&amp;rsquo;s camera totally hidden. Not a chance a common user will discover it, just take a look at this animation.&lt;/p&gt;

&lt;img src=&#34;https://blog.kulman.sk/images/uwp.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;

&lt;p&gt;So how to make this experience a bit better for the user? My solution is instead of launching the &lt;code&gt;FileOpenPicker&lt;/code&gt; showing a &lt;code&gt;Flyout&lt;/code&gt; with two options; Choose from gallery and Take photo. The Choose from gallery option just launches the &lt;code&gt;FileOpenPicker&lt;/code&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=pick-uwp.cs&#34;&gt;&lt;/script&gt;

&lt;p&gt;and the Take photo option uses CameraCaptureUI to directly take a photo&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/2885b4a6faa5b0861f17.js?file=camera-uwp.cs&#34;&gt;&lt;/script&gt;       

&lt;p&gt;The result might look like this. Do not forget to add an option to delete the photo if one is already chosen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kulman.sk/images/uwp2.gif&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Hockey App to distribute Windows Phone apps</title>
      <link>https://blog.kulman.sk/using-hockey-app-to-distribute-windows-phone-apps</link>
      <pubDate>Tue, 16 Feb 2016 09:29:12 +0100</pubDate>
      
      <guid>https://blog.kulman.sk/using-hockey-app-to-distribute-windows-phone-apps</guid>
      <description>&lt;p&gt;Distributing Windows Phone apps to testers has always been a pain. The Private Beta in the Windows Store intended for this is not very flexible and it got much worse with Windows 10 (generating promotional code that can take up to 24 hours).&lt;/p&gt;

&lt;p&gt;One of the better ways to solve the beta build distribution is using a service like &lt;a href=&#34;http://hockeyapp.net/&#34;&gt;Hockey App&lt;/a&gt;, that Microsoft recently acquired. To be able to use Hockey App (or any other service) you need to &lt;a href=&#34;https://products.websecurity.symantec.com/orders/enrollment/microsoftCert.do&#34;&gt;buy a $299 certificate from Symantec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You then use the certificate to sign the XAP or APPX files of your app. Those signed binaries can be than installed on devices with the correct application enrollment token directly from Hockey App, bypassing the Windows Store.&lt;/p&gt;

&lt;p&gt;One of my clients got persuaded to try this approach after some problem with the Windows Store Private Beta and bough the certificate. It took a week for the purchase to go through and another week to finally get the certificate in the correct PFX format from Symantec.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding password to the PFX certificate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The PFX certificate file I got had an empty password. This is quite a problem for all the Microsoft tools that work with certificates, especially for XapSignTool. I could not make the tools work with an empty password so I had to change the password first. This is done quite easily using using OpenSSL.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/24cb76710fc7d6c9f2cb.js?file=pwd.bat&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Generating application enrollment token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To allow the devices to install the signed XAP (or APPX) you need to generate an application enrollment token that will be installed on the devices. The process is quite simple, just call&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/24cb76710fc7d6c9f2cb.js?file=aet.bat&#34;&gt;&lt;/script&gt;

&lt;p&gt;as a result you will get three files: AET.aet, AET.aetx, AET.xml. Get the AET.aetx file and upload it to Hockey App by clicking Add version and drag and dropping the file to the upload dialog. The company profile for your app in Hockey App will get updated using this file. This is done only once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signing the binary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each time you submit a new build to Hockey App, you need to sign the binary (XAP in my case) with the certificate. The &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/apps/dn168929(v=vs.105).aspx&#34;&gt;signing process differs for XAP and APPX files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For XAP files it is just calling the right PowerShell script with the correct parameters&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/igorkulman/24cb76710fc7d6c9f2cb.js?file=sign.bat&#34;&gt;&lt;/script&gt;

&lt;p&gt;and the result is .. an error &lt;code&gt;Signtool Error: This file format cannot be signed because it is not recognized&lt;/code&gt;. So I had to do some research. I found a &lt;a href=&#34;https://stackoverflow.com/questions/20970686/error-signing-windows-phone-xap-file-signtool-error-this-file-format-cannot&#34;&gt;developer describing the same problem on StackOverflow&lt;/a&gt;. The solution was to install &lt;a href=&#34;http://downloads.tomsguide.com/silverlight-microsoft,0301-10659.html&#34;&gt;Silverlight 5.1.30514.0&lt;/a&gt;. This was really strange, it is a Silverlight runtime not an SDK and it does not get installed with Visual Studio or the Windows Phone SDK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributing the app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you upload a signed binary to Hockey App, your testers can download it using a web browser to their devices. Each device needs to install the company profile (the application enrollment token) once, and then can install the builds you provide.&lt;/p&gt;

&lt;p&gt;Installation of the Windows Phone app builds is a bit strange, no install progress or success messages, the app just appears in the list ofter one or two minutes. But it works, and it is much faster and more flexible than the Private Beta provides by the Windows Store.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>